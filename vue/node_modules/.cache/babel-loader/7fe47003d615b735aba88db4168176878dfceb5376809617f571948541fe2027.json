{"ast":null,"code":"require(\"core-js/modules/es.array.push.js\");\n/*\n* MIT Licensed\n* http://www.23developer.com/opensource\n* http://github.com/23/resumable.js\n* Steffen Tiedemann Christensen, steffen@23company.com\n*/\n\n(function () {\n  \"use strict\";\n\n  var Resumable = function (opts) {\n    if (!(this instanceof Resumable)) {\n      return new Resumable(opts);\n    }\n    this.version = 1.0;\n    // SUPPORTED BY BROWSER?\n    // Check if these features are support by the browser:\n    // - File object type\n    // - Blob object type\n    // - FileList object type\n    // - slicing files\n    this.support = typeof File !== 'undefined' && typeof Blob !== 'undefined' && typeof FileList !== 'undefined' && (!!Blob.prototype.webkitSlice || !!Blob.prototype.mozSlice || !!Blob.prototype.slice || false);\n    if (!this.support) return false;\n\n    // PROPERTIES\n    var $ = this;\n    $.files = [];\n    $.defaults = {\n      chunkSize: 1 * 1024 * 1024,\n      forceChunkSize: false,\n      simultaneousUploads: 3,\n      fileParameterName: 'file',\n      chunkNumberParameterName: 'resumableChunkNumber',\n      chunkSizeParameterName: 'resumableChunkSize',\n      currentChunkSizeParameterName: 'resumableCurrentChunkSize',\n      totalSizeParameterName: 'resumableTotalSize',\n      typeParameterName: 'resumableType',\n      identifierParameterName: 'resumableIdentifier',\n      fileNameParameterName: 'resumableFilename',\n      relativePathParameterName: 'resumableRelativePath',\n      totalChunksParameterName: 'resumableTotalChunks',\n      throttleProgressCallbacks: 0.5,\n      query: {},\n      headers: {},\n      preprocess: null,\n      method: 'multipart',\n      uploadMethod: 'POST',\n      testMethod: 'GET',\n      prioritizeFirstAndLastChunk: false,\n      target: '/',\n      testTarget: null,\n      parameterNamespace: '',\n      testChunks: true,\n      generateUniqueIdentifier: null,\n      getTarget: null,\n      maxChunkRetries: 100,\n      chunkRetryInterval: undefined,\n      permanentErrors: [400, 404, 415, 500, 501],\n      maxFiles: undefined,\n      withCredentials: false,\n      xhrTimeout: 0,\n      clearInput: true,\n      chunkFormat: 'blob',\n      setChunkTypeFromFile: false,\n      maxFilesErrorCallback: function (files, errorCount) {\n        var maxFiles = $.getOpt('maxFiles');\n        alert('Please upload no more than ' + maxFiles + ' file' + (maxFiles === 1 ? '' : 's') + ' at a time.');\n      },\n      minFileSize: 1,\n      minFileSizeErrorCallback: function (file, errorCount) {\n        alert(file.fileName || file.name + ' is too small, please upload files larger than ' + $h.formatSize($.getOpt('minFileSize')) + '.');\n      },\n      maxFileSize: undefined,\n      maxFileSizeErrorCallback: function (file, errorCount) {\n        alert(file.fileName || file.name + ' is too large, please upload files less than ' + $h.formatSize($.getOpt('maxFileSize')) + '.');\n      },\n      fileType: [],\n      fileTypeErrorCallback: function (file, errorCount) {\n        alert(file.fileName || file.name + ' has type not allowed, please upload files of type ' + $.getOpt('fileType') + '.');\n      }\n    };\n    $.opts = opts || {};\n    $.getOpt = function (o) {\n      var $opt = this;\n      // Get multiple option if passed an array\n      if (o instanceof Array) {\n        var options = {};\n        $h.each(o, function (option) {\n          options[option] = $opt.getOpt(option);\n        });\n        return options;\n      }\n      // Otherwise, just return a simple option\n      if ($opt instanceof ResumableChunk) {\n        if (typeof $opt.opts[o] !== 'undefined') {\n          return $opt.opts[o];\n        } else {\n          $opt = $opt.fileObj;\n        }\n      }\n      if ($opt instanceof ResumableFile) {\n        if (typeof $opt.opts[o] !== 'undefined') {\n          return $opt.opts[o];\n        } else {\n          $opt = $opt.resumableObj;\n        }\n      }\n      if ($opt instanceof Resumable) {\n        if (typeof $opt.opts[o] !== 'undefined') {\n          return $opt.opts[o];\n        } else {\n          return $opt.defaults[o];\n        }\n      }\n    };\n\n    // EVENTS\n    // catchAll(event, ...)\n    // fileSuccess(file), fileProgress(file), fileAdded(file, event), filesAdded(files, filesSkipped), fileRetry(file),\n    // fileError(file, message), complete(), progress(), error(message, file), pause()\n    $.events = [];\n    $.on = function (event, callback) {\n      $.events.push(event.toLowerCase(), callback);\n    };\n    $.fire = function () {\n      // `arguments` is an object, not array, in FF, so:\n      var args = [];\n      for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);\n      // Find event listeners, and support pseudo-event `catchAll`\n      var event = args[0].toLowerCase();\n      for (var i = 0; i <= $.events.length; i += 2) {\n        if ($.events[i] == event) $.events[i + 1].apply($, args.slice(1));\n        if ($.events[i] == 'catchall') $.events[i + 1].apply(null, args);\n      }\n      if (event == 'fileerror') $.fire('error', args[2], args[1]);\n      if (event == 'fileprogress') $.fire('progress');\n    };\n\n    // INTERNAL HELPER METHODS (handy, but ultimately not part of uploading)\n    var $h = {\n      stopEvent: function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n      },\n      each: function (o, callback) {\n        if (typeof o.length !== 'undefined') {\n          for (var i = 0; i < o.length; i++) {\n            // Array or FileList\n            if (callback(o[i]) === false) return;\n          }\n        } else {\n          for (i in o) {\n            // Object\n            if (callback(i, o[i]) === false) return;\n          }\n        }\n      },\n      generateUniqueIdentifier: function (file, event) {\n        var custom = $.getOpt('generateUniqueIdentifier');\n        if (typeof custom === 'function') {\n          return custom(file, event);\n        }\n        var relativePath = file.webkitRelativePath || file.fileName || file.name; // Some confusion in different versions of Firefox\n        var size = file.size;\n        return size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, '');\n      },\n      contains: function (array, test) {\n        var result = false;\n        $h.each(array, function (value) {\n          if (value == test) {\n            result = true;\n            return false;\n          }\n          return true;\n        });\n        return result;\n      },\n      formatSize: function (size) {\n        if (size < 1024) {\n          return size + ' bytes';\n        } else if (size < 1024 * 1024) {\n          return (size / 1024.0).toFixed(0) + ' KB';\n        } else if (size < 1024 * 1024 * 1024) {\n          return (size / 1024.0 / 1024.0).toFixed(1) + ' MB';\n        } else {\n          return (size / 1024.0 / 1024.0 / 1024.0).toFixed(1) + ' GB';\n        }\n      },\n      getTarget: function (request, params) {\n        var target = $.getOpt('target');\n        if (request === 'test' && $.getOpt('testTarget')) {\n          target = $.getOpt('testTarget') === '/' ? $.getOpt('target') : $.getOpt('testTarget');\n        }\n        if (typeof target === 'function') {\n          return target(params);\n        }\n        var separator = target.indexOf('?') < 0 ? '?' : '&';\n        var joinedParams = params.join('&');\n        return target + separator + joinedParams;\n      }\n    };\n    var onDrop = function (event) {\n      $h.stopEvent(event);\n\n      //handle dropped things as items if we can (this lets us deal with folders nicer in some cases)\n      if (event.dataTransfer && event.dataTransfer.items) {\n        loadFiles(event.dataTransfer.items, event);\n      }\n      //else handle them as files\n      else if (event.dataTransfer && event.dataTransfer.files) {\n        loadFiles(event.dataTransfer.files, event);\n      }\n    };\n    var preventDefault = function (e) {\n      e.preventDefault();\n    };\n\n    /**\n     * processes a single upload item (file or directory)\n     * @param {Object} item item to upload, may be file or directory entry\n     * @param {string} path current file path\n     * @param {File[]} items list of files to append new items to\n     * @param {Function} cb callback invoked when item is processed\n     */\n    function processItem(item, path, items, cb) {\n      var entry;\n      if (item.isFile) {\n        // file provided\n        return item.file(function (file) {\n          file.relativePath = path + file.name;\n          items.push(file);\n          cb();\n        });\n      } else if (item.isDirectory) {\n        // item is already a directory entry, just assign\n        entry = item;\n      } else if (item instanceof File) {\n        items.push(item);\n      }\n      if ('function' === typeof item.webkitGetAsEntry) {\n        // get entry from file object\n        entry = item.webkitGetAsEntry();\n      }\n      if (entry && entry.isDirectory) {\n        // directory provided, process it\n        return processDirectory(entry, path + entry.name + '/', items, cb);\n      }\n      if ('function' === typeof item.getAsFile) {\n        // item represents a File object, convert it\n        item = item.getAsFile();\n        if (item instanceof File) {\n          item.relativePath = path + item.name;\n          items.push(item);\n        }\n      }\n      cb(); // indicate processing is done\n    }\n\n    /**\n     * cps-style list iteration.\n     * invokes all functions in list and waits for their callback to be\n     * triggered.\n     * @param  {Function[]}   items list of functions expecting callback parameter\n     * @param  {Function} cb    callback to trigger after the last callback has been invoked\n     */\n    function processCallbacks(items, cb) {\n      if (!items || items.length === 0) {\n        // empty or no list, invoke callback\n        return cb();\n      }\n      // invoke current function, pass the next part as continuation\n      items[0](function () {\n        processCallbacks(items.slice(1), cb);\n      });\n    }\n\n    /**\n     * recursively traverse directory and collect files to upload\n     * @param  {Object}   directory directory to process\n     * @param  {string}   path      current path\n     * @param  {File[]}   items     target list of items\n     * @param  {Function} cb        callback invoked after traversing directory\n     */\n    function processDirectory(directory, path, items, cb) {\n      var dirReader = directory.createReader();\n      dirReader.readEntries(function (entries) {\n        if (!entries.length) {\n          // empty directory, skip\n          return cb();\n        }\n        // process all conversion callbacks, finally invoke own one\n        processCallbacks(entries.map(function (entry) {\n          // bind all properties except for callback\n          return processItem.bind(null, entry, path, items);\n        }), cb);\n      });\n    }\n\n    /**\n     * process items to extract files to be uploaded\n     * @param  {File[]} items items to process\n     * @param  {Event} event event that led to upload\n     */\n    function loadFiles(items, event) {\n      if (!items.length) {\n        return; // nothing to do\n      }\n      $.fire('beforeAdd');\n      var files = [];\n      processCallbacks(Array.prototype.map.call(items, function (item) {\n        // bind all properties except for callback\n        return processItem.bind(null, item, \"\", files);\n      }), function () {\n        if (files.length) {\n          // at least one file found\n          appendFilesFromFileList(files, event);\n        }\n      });\n    }\n    ;\n    var appendFilesFromFileList = function (fileList, event) {\n      // check for uploading too many files\n      var errorCount = 0;\n      var o = $.getOpt(['maxFiles', 'minFileSize', 'maxFileSize', 'maxFilesErrorCallback', 'minFileSizeErrorCallback', 'maxFileSizeErrorCallback', 'fileType', 'fileTypeErrorCallback']);\n      if (typeof o.maxFiles !== 'undefined' && o.maxFiles < fileList.length + $.files.length) {\n        // if single-file upload, file is already added, and trying to add 1 new file, simply replace the already-added file\n        if (o.maxFiles === 1 && $.files.length === 1 && fileList.length === 1) {\n          $.removeFile($.files[0]);\n        } else {\n          o.maxFilesErrorCallback(fileList, errorCount++);\n          return false;\n        }\n      }\n      var files = [],\n        filesSkipped = [],\n        remaining = fileList.length;\n      var decreaseReamining = function () {\n        if (! --remaining) {\n          // all files processed, trigger event\n          if (!files.length && !filesSkipped.length) {\n            // no succeeded files, just skip\n            return;\n          }\n          window.setTimeout(function () {\n            $.fire('filesAdded', files, filesSkipped);\n          }, 0);\n        }\n      };\n      $h.each(fileList, function (file) {\n        var fileName = file.name;\n        if (o.fileType.length > 0) {\n          var fileTypeFound = false;\n          for (var index in o.fileType) {\n            var extension = '.' + o.fileType[index];\n            if (fileName.toLowerCase().indexOf(extension.toLowerCase(), fileName.length - extension.length) !== -1) {\n              fileTypeFound = true;\n              break;\n            }\n          }\n          if (!fileTypeFound) {\n            o.fileTypeErrorCallback(file, errorCount++);\n            return false;\n          }\n        }\n        if (typeof o.minFileSize !== 'undefined' && file.size < o.minFileSize) {\n          o.minFileSizeErrorCallback(file, errorCount++);\n          return false;\n        }\n        if (typeof o.maxFileSize !== 'undefined' && file.size > o.maxFileSize) {\n          o.maxFileSizeErrorCallback(file, errorCount++);\n          return false;\n        }\n        function addFile(uniqueIdentifier) {\n          if (!$.getFromUniqueIdentifier(uniqueIdentifier)) {\n            (function () {\n              file.uniqueIdentifier = uniqueIdentifier;\n              var f = new ResumableFile($, file, uniqueIdentifier);\n              $.files.push(f);\n              files.push(f);\n              f.container = typeof event != 'undefined' ? event.srcElement : null;\n              window.setTimeout(function () {\n                $.fire('fileAdded', f, event);\n              }, 0);\n            })();\n          } else {\n            filesSkipped.push(file);\n          }\n          ;\n          decreaseReamining();\n        }\n        // directories have size == 0\n        var uniqueIdentifier = $h.generateUniqueIdentifier(file, event);\n        if (uniqueIdentifier && typeof uniqueIdentifier.then === 'function') {\n          // Promise or Promise-like object provided as unique identifier\n          uniqueIdentifier.then(function (uniqueIdentifier) {\n            // unique identifier generation succeeded\n            addFile(uniqueIdentifier);\n          }, function () {\n            // unique identifier generation failed\n            // skip further processing, only decrease file count\n            decreaseReamining();\n          });\n        } else {\n          // non-Promise provided as unique identifier, process synchronously\n          addFile(uniqueIdentifier);\n        }\n      });\n    };\n\n    // INTERNAL OBJECT TYPES\n    function ResumableFile(resumableObj, file, uniqueIdentifier) {\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $._prevProgress = 0;\n      $.resumableObj = resumableObj;\n      $.file = file;\n      $.fileName = file.fileName || file.name; // Some confusion in different versions of Firefox\n      $.size = file.size;\n      $.relativePath = file.relativePath || file.webkitRelativePath || $.fileName;\n      $.uniqueIdentifier = uniqueIdentifier;\n      $._pause = false;\n      $.container = '';\n      var _error = uniqueIdentifier !== undefined;\n\n      // Callback when something happens within the chunk\n      var chunkEvent = function (event, message) {\n        // event can be 'progress', 'success', 'error' or 'retry'\n        switch (event) {\n          case 'progress':\n            $.resumableObj.fire('fileProgress', $, message);\n            break;\n          case 'error':\n            $.abort();\n            _error = true;\n            $.chunks = [];\n            $.resumableObj.fire('fileError', $, message);\n            break;\n          case 'success':\n            if (_error) return;\n            $.resumableObj.fire('fileProgress', $); // it's at least progress\n            if ($.isComplete()) {\n              $.resumableObj.fire('fileSuccess', $, message);\n            }\n            break;\n          case 'retry':\n            $.resumableObj.fire('fileRetry', $);\n            break;\n        }\n      };\n\n      // Main code to set up a file object with chunks,\n      // packaged to be able to handle retries if needed.\n      $.chunks = [];\n      $.abort = function () {\n        // Stop current uploads\n        var abortCount = 0;\n        $h.each($.chunks, function (c) {\n          if (c.status() == 'uploading') {\n            c.abort();\n            abortCount++;\n          }\n        });\n        if (abortCount > 0) $.resumableObj.fire('fileProgress', $);\n      };\n      $.cancel = function () {\n        // Reset this file to be void\n        var _chunks = $.chunks;\n        $.chunks = [];\n        // Stop current uploads\n        $h.each(_chunks, function (c) {\n          if (c.status() == 'uploading') {\n            c.abort();\n            $.resumableObj.uploadNextChunk();\n          }\n        });\n        $.resumableObj.removeFile($);\n        $.resumableObj.fire('fileProgress', $);\n      };\n      $.retry = function () {\n        $.bootstrap();\n        var firedRetry = false;\n        $.resumableObj.on('chunkingComplete', function () {\n          if (!firedRetry) $.resumableObj.upload();\n          firedRetry = true;\n        });\n      };\n      $.bootstrap = function () {\n        $.abort();\n        _error = false;\n        // Rebuild stack of chunks from file\n        $.chunks = [];\n        $._prevProgress = 0;\n        var round = $.getOpt('forceChunkSize') ? Math.ceil : Math.floor;\n        var maxOffset = Math.max(round($.file.size / $.getOpt('chunkSize')), 1);\n        for (var offset = 0; offset < maxOffset; offset++) {\n          (function (offset) {\n            window.setTimeout(function () {\n              $.chunks.push(new ResumableChunk($.resumableObj, $, offset, chunkEvent));\n              $.resumableObj.fire('chunkingProgress', $, offset / maxOffset);\n            }, 0);\n          })(offset);\n        }\n        window.setTimeout(function () {\n          $.resumableObj.fire('chunkingComplete', $);\n        }, 0);\n      };\n      $.progress = function () {\n        if (_error) return 1;\n        // Sum up progress across everything\n        var ret = 0;\n        var error = false;\n        $h.each($.chunks, function (c) {\n          if (c.status() == 'error') error = true;\n          ret += c.progress(true); // get chunk progress relative to entire file\n        });\n        ret = error ? 1 : ret > 0.99999 ? 1 : ret;\n        ret = Math.max($._prevProgress, ret); // We don't want to lose percentages when an upload is paused\n        $._prevProgress = ret;\n        return ret;\n      };\n      $.isUploading = function () {\n        var uploading = false;\n        $h.each($.chunks, function (chunk) {\n          if (chunk.status() == 'uploading') {\n            uploading = true;\n            return false;\n          }\n        });\n        return uploading;\n      };\n      $.isComplete = function () {\n        var outstanding = false;\n        $h.each($.chunks, function (chunk) {\n          var status = chunk.status();\n          if (status == 'pending' || status == 'uploading' || chunk.preprocessState === 1) {\n            outstanding = true;\n            return false;\n          }\n        });\n        return !outstanding;\n      };\n      $.pause = function (pause) {\n        if (typeof pause === 'undefined') {\n          $._pause = $._pause ? false : true;\n        } else {\n          $._pause = pause;\n        }\n      };\n      $.isPaused = function () {\n        return $._pause;\n      };\n\n      // Bootstrap and return\n      $.resumableObj.fire('chunkingStart', $);\n      $.bootstrap();\n      return this;\n    }\n    function ResumableChunk(resumableObj, fileObj, offset, callback) {\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $.resumableObj = resumableObj;\n      $.fileObj = fileObj;\n      $.fileObjSize = fileObj.size;\n      $.fileObjType = fileObj.file.type;\n      $.offset = offset;\n      $.callback = callback;\n      $.lastProgressCallback = new Date();\n      $.tested = false;\n      $.retries = 0;\n      $.pendingRetry = false;\n      $.preprocessState = 0; // 0 = unprocessed, 1 = processing, 2 = finished\n\n      // Computed properties\n      var chunkSize = $.getOpt('chunkSize');\n      $.loaded = 0;\n      $.startByte = $.offset * chunkSize;\n      $.endByte = Math.min($.fileObjSize, ($.offset + 1) * chunkSize);\n      if ($.fileObjSize - $.endByte < chunkSize && !$.getOpt('forceChunkSize')) {\n        // The last chunk will be bigger than the chunk size, but less than 2*chunkSize\n        $.endByte = $.fileObjSize;\n      }\n      $.xhr = null;\n\n      // test() makes a GET request without any data to see if the chunk has already been uploaded in a previous session\n      $.test = function () {\n        // Set up request and listen for event\n        $.xhr = new XMLHttpRequest();\n        var testHandler = function (e) {\n          $.tested = true;\n          var status = $.status();\n          if (status == 'success') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.send();\n          }\n        };\n        $.xhr.addEventListener('load', testHandler, false);\n        $.xhr.addEventListener('error', testHandler, false);\n        $.xhr.addEventListener('timeout', testHandler, false);\n\n        // Add data from the query options\n        var params = [];\n        var parameterNamespace = $.getOpt('parameterNamespace');\n        var customQuery = $.getOpt('query');\n        if (typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function (k, v) {\n          params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n        });\n        // Add extra data to identify chunk\n        params = params.concat([\n        // define key/value pairs for additional parameters\n        ['chunkNumberParameterName', $.offset + 1], ['chunkSizeParameterName', $.getOpt('chunkSize')], ['currentChunkSizeParameterName', $.endByte - $.startByte], ['totalSizeParameterName', $.fileObjSize], ['typeParameterName', $.fileObjType], ['identifierParameterName', $.fileObj.uniqueIdentifier], ['fileNameParameterName', $.fileObj.fileName], ['relativePathParameterName', $.fileObj.relativePath], ['totalChunksParameterName', $.fileObj.chunks.length]].filter(function (pair) {\n          // include items that resolve to truthy values\n          // i.e. exclude false, null, undefined and empty strings\n          return $.getOpt(pair[0]);\n        }).map(function (pair) {\n          // map each key/value pair to its final form\n          return [parameterNamespace + $.getOpt(pair[0]), encodeURIComponent(pair[1])].join('=');\n        }));\n        // Append the relevant chunk and send it\n        $.xhr.open($.getOpt('testMethod'), $h.getTarget('test', params));\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials');\n        // Add data from header options\n        var customHeaders = $.getOpt('headers');\n        if (typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n        $h.each(customHeaders, function (k, v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n        $.xhr.send(null);\n      };\n      $.preprocessFinished = function () {\n        $.preprocessState = 2;\n        $.send();\n      };\n\n      // send() uploads the actual data in a POST call\n      $.send = function () {\n        var preprocess = $.getOpt('preprocess');\n        if (typeof preprocess === 'function') {\n          switch ($.preprocessState) {\n            case 0:\n              $.preprocessState = 1;\n              preprocess($);\n              return;\n            case 1:\n              return;\n            case 2:\n              break;\n          }\n        }\n        if ($.getOpt('testChunks') && !$.tested) {\n          $.test();\n          return;\n        }\n\n        // Set up request and listen for event\n        $.xhr = new XMLHttpRequest();\n\n        // Progress\n        $.xhr.upload.addEventListener('progress', function (e) {\n          if (new Date() - $.lastProgressCallback > $.getOpt('throttleProgressCallbacks') * 1000) {\n            $.callback('progress');\n            $.lastProgressCallback = new Date();\n          }\n          $.loaded = e.loaded || 0;\n        }, false);\n        $.loaded = 0;\n        $.pendingRetry = false;\n        $.callback('progress');\n\n        // Done (either done, failed or retry)\n        var doneHandler = function (e) {\n          var status = $.status();\n          if (status == 'success' || status == 'error') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.callback('retry', $.message());\n            $.abort();\n            $.retries++;\n            var retryInterval = $.getOpt('chunkRetryInterval');\n            if (retryInterval !== undefined) {\n              $.pendingRetry = true;\n              setTimeout($.send, retryInterval);\n            } else {\n              $.send();\n            }\n          }\n        };\n        $.xhr.addEventListener('load', doneHandler, false);\n        $.xhr.addEventListener('error', doneHandler, false);\n        $.xhr.addEventListener('timeout', doneHandler, false);\n\n        // Set up the basic query data from Resumable\n        var query = [['chunkNumberParameterName', $.offset + 1], ['chunkSizeParameterName', $.getOpt('chunkSize')], ['currentChunkSizeParameterName', $.endByte - $.startByte], ['totalSizeParameterName', $.fileObjSize], ['typeParameterName', $.fileObjType], ['identifierParameterName', $.fileObj.uniqueIdentifier], ['fileNameParameterName', $.fileObj.fileName], ['relativePathParameterName', $.fileObj.relativePath], ['totalChunksParameterName', $.fileObj.chunks.length]].filter(function (pair) {\n          // include items that resolve to truthy values\n          // i.e. exclude false, null, undefined and empty strings\n          return $.getOpt(pair[0]);\n        }).reduce(function (query, pair) {\n          // assign query key/value\n          query[$.getOpt(pair[0])] = pair[1];\n          return query;\n        }, {});\n        // Mix in custom data\n        var customQuery = $.getOpt('query');\n        if (typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function (k, v) {\n          query[k] = v;\n        });\n        var func = $.fileObj.file.slice ? 'slice' : $.fileObj.file.mozSlice ? 'mozSlice' : $.fileObj.file.webkitSlice ? 'webkitSlice' : 'slice';\n        var bytes = $.fileObj.file[func]($.startByte, $.endByte, $.getOpt('setChunkTypeFromFile') ? $.fileObj.file.type : \"\");\n        var data = null;\n        var params = [];\n        var parameterNamespace = $.getOpt('parameterNamespace');\n        if ($.getOpt('method') === 'octet') {\n          // Add data from the query options\n          data = bytes;\n          $h.each(query, function (k, v) {\n            params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n          });\n        } else {\n          // Add data from the query options\n          data = new FormData();\n          $h.each(query, function (k, v) {\n            data.append(parameterNamespace + k, v);\n            params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n          });\n          if ($.getOpt('chunkFormat') == 'blob') {\n            data.append(parameterNamespace + $.getOpt('fileParameterName'), bytes, $.fileObj.fileName);\n          } else if ($.getOpt('chunkFormat') == 'base64') {\n            var fr = new FileReader();\n            fr.onload = function (e) {\n              data.append(parameterNamespace + $.getOpt('fileParameterName'), fr.result);\n              $.xhr.send(data);\n            };\n            fr.readAsDataURL(bytes);\n          }\n        }\n        var target = $h.getTarget('upload', params);\n        var method = $.getOpt('uploadMethod');\n        $.xhr.open(method, target);\n        if ($.getOpt('method') === 'octet') {\n          $.xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n        }\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials');\n        // Add data from header options\n        var customHeaders = $.getOpt('headers');\n        if (typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n        $h.each(customHeaders, function (k, v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n        if ($.getOpt('chunkFormat') == 'blob') {\n          $.xhr.send(data);\n        }\n      };\n      $.abort = function () {\n        // Abort and reset\n        if ($.xhr) $.xhr.abort();\n        $.xhr = null;\n      };\n      $.status = function () {\n        // Returns: 'pending', 'uploading', 'success', 'error'\n        if ($.pendingRetry) {\n          // if pending retry then that's effectively the same as actively uploading,\n          // there might just be a slight delay before the retry starts\n          return 'uploading';\n        } else if (!$.xhr) {\n          return 'pending';\n        } else if ($.xhr.readyState < 4) {\n          // Status is really 'OPENED', 'HEADERS_RECEIVED' or 'LOADING' - meaning that stuff is happening\n          return 'uploading';\n        } else {\n          if ($.xhr.status == 200 || $.xhr.status == 201) {\n            // HTTP 200, 201 (created)\n            return 'success';\n          } else if ($h.contains($.getOpt('permanentErrors'), $.xhr.status) || $.retries >= $.getOpt('maxChunkRetries')) {\n            // HTTP 415/500/501, permanent error\n            return 'error';\n          } else {\n            // this should never happen, but we'll reset and queue a retry\n            // a likely case for this would be 503 service unavailable\n            $.abort();\n            return 'pending';\n          }\n        }\n      };\n      $.message = function () {\n        return $.xhr ? $.xhr.responseText : '';\n      };\n      $.progress = function (relative) {\n        if (typeof relative === 'undefined') relative = false;\n        var factor = relative ? ($.endByte - $.startByte) / $.fileObjSize : 1;\n        if ($.pendingRetry) return 0;\n        if (!$.xhr || !$.xhr.status) factor *= .95;\n        var s = $.status();\n        switch (s) {\n          case 'success':\n          case 'error':\n            return 1 * factor;\n          case 'pending':\n            return 0 * factor;\n          default:\n            return $.loaded / ($.endByte - $.startByte) * factor;\n        }\n      };\n      return this;\n    }\n\n    // QUEUE\n    $.uploadNextChunk = function () {\n      var found = false;\n\n      // In some cases (such as videos) it's really handy to upload the first\n      // and last chunk of a file quickly; this let's the server check the file's\n      // metadata and determine if there's even a point in continuing.\n      if ($.getOpt('prioritizeFirstAndLastChunk')) {\n        $h.each($.files, function (file) {\n          if (file.chunks.length && file.chunks[0].status() == 'pending' && file.chunks[0].preprocessState === 0) {\n            file.chunks[0].send();\n            found = true;\n            return false;\n          }\n          if (file.chunks.length > 1 && file.chunks[file.chunks.length - 1].status() == 'pending' && file.chunks[file.chunks.length - 1].preprocessState === 0) {\n            file.chunks[file.chunks.length - 1].send();\n            found = true;\n            return false;\n          }\n        });\n        if (found) return true;\n      }\n\n      // Now, simply look for the next, best thing to upload\n      $h.each($.files, function (file) {\n        if (file.isPaused() === false) {\n          $h.each(file.chunks, function (chunk) {\n            if (chunk.status() == 'pending' && chunk.preprocessState === 0) {\n              chunk.send();\n              found = true;\n              return false;\n            }\n          });\n        }\n        if (found) return false;\n      });\n      if (found) return true;\n\n      // The are no more outstanding chunks to upload, check is everything is done\n      var outstanding = false;\n      $h.each($.files, function (file) {\n        if (!file.isComplete()) {\n          outstanding = true;\n          return false;\n        }\n      });\n      if (!outstanding) {\n        // All chunks have been uploaded, complete\n        $.fire('complete');\n      }\n      return false;\n    };\n\n    // PUBLIC METHODS FOR RESUMABLE.JS\n    $.assignBrowse = function (domNodes, isDirectory) {\n      if (typeof domNodes.length == 'undefined') domNodes = [domNodes];\n      $h.each(domNodes, function (domNode) {\n        var input;\n        if (domNode.tagName === 'INPUT' && domNode.type === 'file') {\n          input = domNode;\n        } else {\n          input = document.createElement('input');\n          input.setAttribute('type', 'file');\n          input.style.display = 'none';\n          domNode.addEventListener('click', function () {\n            input.style.opacity = 0;\n            input.style.display = 'block';\n            input.focus();\n            input.click();\n            input.style.display = 'none';\n          }, false);\n          domNode.appendChild(input);\n        }\n        var maxFiles = $.getOpt('maxFiles');\n        if (typeof maxFiles === 'undefined' || maxFiles != 1) {\n          input.setAttribute('multiple', 'multiple');\n        } else {\n          input.removeAttribute('multiple');\n        }\n        if (isDirectory) {\n          input.setAttribute('webkitdirectory', 'webkitdirectory');\n        } else {\n          input.removeAttribute('webkitdirectory');\n        }\n        var fileTypes = $.getOpt('fileType');\n        if (typeof fileTypes !== 'undefined' && fileTypes.length >= 1) {\n          input.setAttribute('accept', fileTypes.map(function (e) {\n            return '.' + e;\n          }).join(','));\n        } else {\n          input.removeAttribute('accept');\n        }\n        // When new files are added, simply append them to the overall list\n        input.addEventListener('change', function (e) {\n          appendFilesFromFileList(e.target.files, e);\n          var clearInput = $.getOpt('clearInput');\n          if (clearInput) {\n            e.target.value = '';\n          }\n        }, false);\n      });\n    };\n    $.assignDrop = function (domNodes) {\n      if (typeof domNodes.length == 'undefined') domNodes = [domNodes];\n      $h.each(domNodes, function (domNode) {\n        domNode.addEventListener('dragover', preventDefault, false);\n        domNode.addEventListener('dragenter', preventDefault, false);\n        domNode.addEventListener('drop', onDrop, false);\n      });\n    };\n    $.unAssignDrop = function (domNodes) {\n      if (typeof domNodes.length == 'undefined') domNodes = [domNodes];\n      $h.each(domNodes, function (domNode) {\n        domNode.removeEventListener('dragover', preventDefault);\n        domNode.removeEventListener('dragenter', preventDefault);\n        domNode.removeEventListener('drop', onDrop);\n      });\n    };\n    $.isUploading = function () {\n      var uploading = false;\n      $h.each($.files, function (file) {\n        if (file.isUploading()) {\n          uploading = true;\n          return false;\n        }\n      });\n      return uploading;\n    };\n    $.upload = function () {\n      // Make sure we don't start too many uploads at once\n      if ($.isUploading()) return;\n      // Kick off the queue\n      $.fire('uploadStart');\n      for (var num = 1; num <= $.getOpt('simultaneousUploads'); num++) {\n        $.uploadNextChunk();\n      }\n    };\n    $.pause = function () {\n      // Resume all chunks currently being uploaded\n      $h.each($.files, function (file) {\n        file.abort();\n      });\n      $.fire('pause');\n    };\n    $.cancel = function () {\n      $.fire('beforeCancel');\n      for (var i = $.files.length - 1; i >= 0; i--) {\n        $.files[i].cancel();\n      }\n      $.fire('cancel');\n    };\n    $.progress = function () {\n      var totalDone = 0;\n      var totalSize = 0;\n      // Resume all chunks currently being uploaded\n      $h.each($.files, function (file) {\n        totalDone += file.progress() * file.size;\n        totalSize += file.size;\n      });\n      return totalSize > 0 ? totalDone / totalSize : 0;\n    };\n    $.addFile = function (file, event) {\n      appendFilesFromFileList([file], event);\n    };\n    $.addFiles = function (files, event) {\n      appendFilesFromFileList(files, event);\n    };\n    $.removeFile = function (file) {\n      for (var i = $.files.length - 1; i >= 0; i--) {\n        if ($.files[i] === file) {\n          $.files.splice(i, 1);\n        }\n      }\n    };\n    $.getFromUniqueIdentifier = function (uniqueIdentifier) {\n      var ret = false;\n      $h.each($.files, function (f) {\n        if (f.uniqueIdentifier == uniqueIdentifier) ret = f;\n      });\n      return ret;\n    };\n    $.getSize = function () {\n      var totalSize = 0;\n      $h.each($.files, function (file) {\n        totalSize += file.size;\n      });\n      return totalSize;\n    };\n    $.handleDropEvent = function (e) {\n      onDrop(e);\n    };\n    $.handleChangeEvent = function (e) {\n      appendFilesFromFileList(e.target.files, e);\n      e.target.value = '';\n    };\n    $.updateQuery = function (query) {\n      $.opts.query = query;\n    };\n    return this;\n  };\n\n  // Node.js-style export for Node and Component\n  if (typeof module != 'undefined') {\n    module.exports = Resumable;\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD/requirejs: Define the module\n    define(function () {\n      return Resumable;\n    });\n  } else {\n    // Browser: Expose to window\n    window.Resumable = Resumable;\n  }\n})();","map":{"version":3,"names":["Resumable","opts","version","support","File","Blob","FileList","prototype","webkitSlice","mozSlice","slice","$","files","defaults","chunkSize","forceChunkSize","simultaneousUploads","fileParameterName","chunkNumberParameterName","chunkSizeParameterName","currentChunkSizeParameterName","totalSizeParameterName","typeParameterName","identifierParameterName","fileNameParameterName","relativePathParameterName","totalChunksParameterName","throttleProgressCallbacks","query","headers","preprocess","method","uploadMethod","testMethod","prioritizeFirstAndLastChunk","target","testTarget","parameterNamespace","testChunks","generateUniqueIdentifier","getTarget","maxChunkRetries","chunkRetryInterval","undefined","permanentErrors","maxFiles","withCredentials","xhrTimeout","clearInput","chunkFormat","setChunkTypeFromFile","maxFilesErrorCallback","errorCount","getOpt","alert","minFileSize","minFileSizeErrorCallback","file","fileName","name","$h","formatSize","maxFileSize","maxFileSizeErrorCallback","fileType","fileTypeErrorCallback","o","$opt","Array","options","each","option","ResumableChunk","fileObj","ResumableFile","resumableObj","events","on","event","callback","push","toLowerCase","fire","args","i","arguments","length","apply","stopEvent","e","stopPropagation","preventDefault","custom","relativePath","webkitRelativePath","size","replace","contains","array","test","result","value","toFixed","request","params","separator","indexOf","joinedParams","join","onDrop","dataTransfer","items","loadFiles","processItem","item","path","cb","entry","isFile","isDirectory","webkitGetAsEntry","processDirectory","getAsFile","processCallbacks","directory","dirReader","createReader","readEntries","entries","map","bind","call","appendFilesFromFileList","fileList","removeFile","filesSkipped","remaining","decreaseReamining","window","setTimeout","fileTypeFound","index","extension","addFile","uniqueIdentifier","getFromUniqueIdentifier","f","container","srcElement","then","_prevProgress","_pause","_error","chunkEvent","message","abort","chunks","isComplete","abortCount","c","status","cancel","_chunks","uploadNextChunk","retry","bootstrap","firedRetry","upload","round","Math","ceil","floor","maxOffset","max","offset","progress","ret","error","isUploading","uploading","chunk","outstanding","preprocessState","pause","isPaused","fileObjSize","fileObjType","type","lastProgressCallback","Date","tested","retries","pendingRetry","loaded","startByte","endByte","min","xhr","XMLHttpRequest","testHandler","send","addEventListener","customQuery","k","v","encodeURIComponent","concat","filter","pair","open","timeout","customHeaders","setRequestHeader","preprocessFinished","doneHandler","retryInterval","reduce","func","bytes","data","FormData","append","fr","FileReader","onload","readAsDataURL","readyState","responseText","relative","factor","s","found","assignBrowse","domNodes","domNode","input","tagName","document","createElement","setAttribute","style","display","opacity","focus","click","appendChild","removeAttribute","fileTypes","assignDrop","unAssignDrop","removeEventListener","num","totalDone","totalSize","addFiles","splice","getSize","handleDropEvent","handleChangeEvent","updateQuery","module","exports","define","amd"],"sources":["E:/khoaluan/w-score/vue/node_modules/resumablejs/resumable.js"],"sourcesContent":["/*\n* MIT Licensed\n* http://www.23developer.com/opensource\n* http://github.com/23/resumable.js\n* Steffen Tiedemann Christensen, steffen@23company.com\n*/\n\n(function(){\n\"use strict\";\n\n  var Resumable = function(opts){\n    if ( !(this instanceof Resumable) ) {\n      return new Resumable(opts);\n    }\n    this.version = 1.0;\n    // SUPPORTED BY BROWSER?\n    // Check if these features are support by the browser:\n    // - File object type\n    // - Blob object type\n    // - FileList object type\n    // - slicing files\n    this.support = (\n                   (typeof(File)!=='undefined')\n                   &&\n                   (typeof(Blob)!=='undefined')\n                   &&\n                   (typeof(FileList)!=='undefined')\n                   &&\n                   (!!Blob.prototype.webkitSlice||!!Blob.prototype.mozSlice||!!Blob.prototype.slice||false)\n                   );\n    if(!this.support) return(false);\n\n\n    // PROPERTIES\n    var $ = this;\n    $.files = [];\n    $.defaults = {\n      chunkSize:1*1024*1024,\n      forceChunkSize:false,\n      simultaneousUploads:3,\n      fileParameterName:'file',\n      chunkNumberParameterName: 'resumableChunkNumber',\n      chunkSizeParameterName: 'resumableChunkSize',\n      currentChunkSizeParameterName: 'resumableCurrentChunkSize',\n      totalSizeParameterName: 'resumableTotalSize',\n      typeParameterName: 'resumableType',\n      identifierParameterName: 'resumableIdentifier',\n      fileNameParameterName: 'resumableFilename',\n      relativePathParameterName: 'resumableRelativePath',\n      totalChunksParameterName: 'resumableTotalChunks',\n      throttleProgressCallbacks: 0.5,\n      query:{},\n      headers:{},\n      preprocess:null,\n      method:'multipart',\n      uploadMethod: 'POST',\n      testMethod: 'GET',\n      prioritizeFirstAndLastChunk:false,\n      target:'/',\n      testTarget: null,\n      parameterNamespace:'',\n      testChunks:true,\n      generateUniqueIdentifier:null,\n      getTarget:null,\n      maxChunkRetries:100,\n      chunkRetryInterval:undefined,\n      permanentErrors:[400, 404, 415, 500, 501],\n      maxFiles:undefined,\n      withCredentials:false,\n      xhrTimeout:0,\n      clearInput:true,\n      chunkFormat:'blob',\n      setChunkTypeFromFile:false,\n      maxFilesErrorCallback:function (files, errorCount) {\n        var maxFiles = $.getOpt('maxFiles');\n        alert('Please upload no more than ' + maxFiles + ' file' + (maxFiles === 1 ? '' : 's') + ' at a time.');\n      },\n      minFileSize:1,\n      minFileSizeErrorCallback:function(file, errorCount) {\n        alert(file.fileName||file.name +' is too small, please upload files larger than ' + $h.formatSize($.getOpt('minFileSize')) + '.');\n      },\n      maxFileSize:undefined,\n      maxFileSizeErrorCallback:function(file, errorCount) {\n        alert(file.fileName||file.name +' is too large, please upload files less than ' + $h.formatSize($.getOpt('maxFileSize')) + '.');\n      },\n      fileType: [],\n      fileTypeErrorCallback: function(file, errorCount) {\n        alert(file.fileName||file.name +' has type not allowed, please upload files of type ' + $.getOpt('fileType') + '.');\n      }\n    };\n    $.opts = opts||{};\n    $.getOpt = function(o) {\n      var $opt = this;\n      // Get multiple option if passed an array\n      if(o instanceof Array) {\n        var options = {};\n        $h.each(o, function(option){\n          options[option] = $opt.getOpt(option);\n        });\n        return options;\n      }\n      // Otherwise, just return a simple option\n      if ($opt instanceof ResumableChunk) {\n        if (typeof $opt.opts[o] !== 'undefined') { return $opt.opts[o]; }\n        else { $opt = $opt.fileObj; }\n      }\n      if ($opt instanceof ResumableFile) {\n        if (typeof $opt.opts[o] !== 'undefined') { return $opt.opts[o]; }\n        else { $opt = $opt.resumableObj; }\n      }\n      if ($opt instanceof Resumable) {\n        if (typeof $opt.opts[o] !== 'undefined') { return $opt.opts[o]; }\n        else { return $opt.defaults[o]; }\n      }\n    };\n\n    // EVENTS\n    // catchAll(event, ...)\n    // fileSuccess(file), fileProgress(file), fileAdded(file, event), filesAdded(files, filesSkipped), fileRetry(file),\n    // fileError(file, message), complete(), progress(), error(message, file), pause()\n    $.events = [];\n    $.on = function(event,callback){\n      $.events.push(event.toLowerCase(), callback);\n    };\n    $.fire = function(){\n      // `arguments` is an object, not array, in FF, so:\n      var args = [];\n      for (var i=0; i<arguments.length; i++) args.push(arguments[i]);\n      // Find event listeners, and support pseudo-event `catchAll`\n      var event = args[0].toLowerCase();\n      for (var i=0; i<=$.events.length; i+=2) {\n        if($.events[i]==event) $.events[i+1].apply($,args.slice(1));\n        if($.events[i]=='catchall') $.events[i+1].apply(null,args);\n      }\n      if(event=='fileerror') $.fire('error', args[2], args[1]);\n      if(event=='fileprogress') $.fire('progress');\n    };\n\n\n    // INTERNAL HELPER METHODS (handy, but ultimately not part of uploading)\n    var $h = {\n      stopEvent: function(e){\n        e.stopPropagation();\n        e.preventDefault();\n      },\n      each: function(o,callback){\n        if(typeof(o.length)!=='undefined') {\n          for (var i=0; i<o.length; i++) {\n            // Array or FileList\n            if(callback(o[i])===false) return;\n          }\n        } else {\n          for (i in o) {\n            // Object\n            if(callback(i,o[i])===false) return;\n          }\n        }\n      },\n      generateUniqueIdentifier:function(file, event){\n        var custom = $.getOpt('generateUniqueIdentifier');\n        if(typeof custom === 'function') {\n          return custom(file, event);\n        }\n        var relativePath = file.webkitRelativePath||file.fileName||file.name; // Some confusion in different versions of Firefox\n        var size = file.size;\n        return(size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, ''));\n      },\n      contains:function(array,test) {\n        var result = false;\n\n        $h.each(array, function(value) {\n          if (value == test) {\n            result = true;\n            return false;\n          }\n          return true;\n        });\n\n        return result;\n      },\n      formatSize:function(size){\n        if(size<1024) {\n          return size + ' bytes';\n        } else if(size<1024*1024) {\n          return (size/1024.0).toFixed(0) + ' KB';\n        } else if(size<1024*1024*1024) {\n          return (size/1024.0/1024.0).toFixed(1) + ' MB';\n        } else {\n          return (size/1024.0/1024.0/1024.0).toFixed(1) + ' GB';\n        }\n      },\n      getTarget:function(request, params){\n        var target = $.getOpt('target');\n\n        if (request === 'test' && $.getOpt('testTarget')) {\n          target = $.getOpt('testTarget') === '/' ? $.getOpt('target') : $.getOpt('testTarget');\n        }\n\n        if (typeof target === 'function') {\n          return target(params);\n        }\n\n        var separator = target.indexOf('?') < 0 ? '?' : '&';\n        var joinedParams = params.join('&');\n\n        return target + separator + joinedParams;\n      }\n    };\n\n    var onDrop = function(event){\n      $h.stopEvent(event);\n\n      //handle dropped things as items if we can (this lets us deal with folders nicer in some cases)\n      if (event.dataTransfer && event.dataTransfer.items) {\n        loadFiles(event.dataTransfer.items, event);\n      }\n      //else handle them as files\n      else if (event.dataTransfer && event.dataTransfer.files) {\n        loadFiles(event.dataTransfer.files, event);\n      }\n    };\n    var preventDefault = function(e) {\n      e.preventDefault();\n    };\n\n    /**\n     * processes a single upload item (file or directory)\n     * @param {Object} item item to upload, may be file or directory entry\n     * @param {string} path current file path\n     * @param {File[]} items list of files to append new items to\n     * @param {Function} cb callback invoked when item is processed\n     */\n    function processItem(item, path, items, cb) {\n      var entry;\n      if(item.isFile){\n        // file provided\n        return item.file(function(file){\n          file.relativePath = path + file.name;\n          items.push(file);\n          cb();\n        });\n      }else if(item.isDirectory){\n        // item is already a directory entry, just assign\n        entry = item;\n      }else if(item instanceof File) {\n        items.push(item);\n      }\n      if('function' === typeof item.webkitGetAsEntry){\n        // get entry from file object\n        entry = item.webkitGetAsEntry();\n      }\n      if(entry && entry.isDirectory){\n        // directory provided, process it\n        return processDirectory(entry, path + entry.name + '/', items, cb);\n      }\n      if('function' === typeof item.getAsFile){\n        // item represents a File object, convert it\n        item = item.getAsFile();\n        if(item instanceof File) {\n          item.relativePath = path + item.name;\n          items.push(item);\n        }\n      }\n      cb(); // indicate processing is done\n    }\n\n\n    /**\n     * cps-style list iteration.\n     * invokes all functions in list and waits for their callback to be\n     * triggered.\n     * @param  {Function[]}   items list of functions expecting callback parameter\n     * @param  {Function} cb    callback to trigger after the last callback has been invoked\n     */\n    function processCallbacks(items, cb){\n      if(!items || items.length === 0){\n        // empty or no list, invoke callback\n        return cb();\n      }\n      // invoke current function, pass the next part as continuation\n      items[0](function(){\n        processCallbacks(items.slice(1), cb);\n      });\n    }\n\n    /**\n     * recursively traverse directory and collect files to upload\n     * @param  {Object}   directory directory to process\n     * @param  {string}   path      current path\n     * @param  {File[]}   items     target list of items\n     * @param  {Function} cb        callback invoked after traversing directory\n     */\n    function processDirectory (directory, path, items, cb) {\n      var dirReader = directory.createReader();\n      dirReader.readEntries(function(entries){\n        if(!entries.length){\n          // empty directory, skip\n          return cb();\n        }\n        // process all conversion callbacks, finally invoke own one\n        processCallbacks(\n          entries.map(function(entry){\n            // bind all properties except for callback\n            return processItem.bind(null, entry, path, items);\n          }),\n          cb\n        );\n      });\n    }\n\n    /**\n     * process items to extract files to be uploaded\n     * @param  {File[]} items items to process\n     * @param  {Event} event event that led to upload\n     */\n    function loadFiles(items, event) {\n      if(!items.length){\n        return; // nothing to do\n      }\n      $.fire('beforeAdd');\n      var files = [];\n      processCallbacks(\n          Array.prototype.map.call(items, function(item){\n            // bind all properties except for callback\n            return processItem.bind(null, item, \"\", files);\n          }),\n          function(){\n            if(files.length){\n              // at least one file found\n              appendFilesFromFileList(files, event);\n            }\n          }\n      );\n    };\n\n    var appendFilesFromFileList = function(fileList, event){\n      // check for uploading too many files\n      var errorCount = 0;\n      var o = $.getOpt(['maxFiles', 'minFileSize', 'maxFileSize', 'maxFilesErrorCallback', 'minFileSizeErrorCallback', 'maxFileSizeErrorCallback', 'fileType', 'fileTypeErrorCallback']);\n      if (typeof(o.maxFiles)!=='undefined' && o.maxFiles<(fileList.length+$.files.length)) {\n        // if single-file upload, file is already added, and trying to add 1 new file, simply replace the already-added file\n        if (o.maxFiles===1 && $.files.length===1 && fileList.length===1) {\n          $.removeFile($.files[0]);\n        } else {\n          o.maxFilesErrorCallback(fileList, errorCount++);\n          return false;\n        }\n      }\n      var files = [], filesSkipped = [], remaining = fileList.length;\n      var decreaseReamining = function(){\n        if(!--remaining){\n          // all files processed, trigger event\n          if(!files.length && !filesSkipped.length){\n            // no succeeded files, just skip\n            return;\n          }\n          window.setTimeout(function(){\n            $.fire('filesAdded', files, filesSkipped);\n          },0);\n        }\n      };\n      $h.each(fileList, function(file){\n        var fileName = file.name;\n        if(o.fileType.length > 0){\n          var fileTypeFound = false;\n          for(var index in o.fileType){\n            var extension = '.' + o.fileType[index];\n\t\t\tif(fileName.toLowerCase().indexOf(extension.toLowerCase(), fileName.length - extension.length) !== -1){\n              fileTypeFound = true;\n              break;\n            }\n          }\n          if (!fileTypeFound) {\n            o.fileTypeErrorCallback(file, errorCount++);\n            return false;\n          }\n        }\n\n        if (typeof(o.minFileSize)!=='undefined' && file.size<o.minFileSize) {\n          o.minFileSizeErrorCallback(file, errorCount++);\n          return false;\n        }\n        if (typeof(o.maxFileSize)!=='undefined' && file.size>o.maxFileSize) {\n          o.maxFileSizeErrorCallback(file, errorCount++);\n          return false;\n        }\n\n        function addFile(uniqueIdentifier){\n          if (!$.getFromUniqueIdentifier(uniqueIdentifier)) {(function(){\n            file.uniqueIdentifier = uniqueIdentifier;\n            var f = new ResumableFile($, file, uniqueIdentifier);\n            $.files.push(f);\n            files.push(f);\n            f.container = (typeof event != 'undefined' ? event.srcElement : null);\n            window.setTimeout(function(){\n              $.fire('fileAdded', f, event)\n            },0);\n          })()} else {\n            filesSkipped.push(file);\n          };\n          decreaseReamining();\n        }\n        // directories have size == 0\n        var uniqueIdentifier = $h.generateUniqueIdentifier(file, event);\n        if(uniqueIdentifier && typeof uniqueIdentifier.then === 'function'){\n          // Promise or Promise-like object provided as unique identifier\n          uniqueIdentifier\n          .then(\n            function(uniqueIdentifier){\n              // unique identifier generation succeeded\n              addFile(uniqueIdentifier);\n            },\n           function(){\n              // unique identifier generation failed\n              // skip further processing, only decrease file count\n              decreaseReamining();\n            }\n          );\n        }else{\n          // non-Promise provided as unique identifier, process synchronously\n          addFile(uniqueIdentifier);\n        }\n      });\n    };\n\n    // INTERNAL OBJECT TYPES\n    function ResumableFile(resumableObj, file, uniqueIdentifier){\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $._prevProgress = 0;\n      $.resumableObj = resumableObj;\n      $.file = file;\n      $.fileName = file.fileName||file.name; // Some confusion in different versions of Firefox\n      $.size = file.size;\n      $.relativePath = file.relativePath || file.webkitRelativePath || $.fileName;\n      $.uniqueIdentifier = uniqueIdentifier;\n      $._pause = false;\n      $.container = '';\n      var _error = uniqueIdentifier !== undefined;\n\n      // Callback when something happens within the chunk\n      var chunkEvent = function(event, message){\n        // event can be 'progress', 'success', 'error' or 'retry'\n        switch(event){\n        case 'progress':\n          $.resumableObj.fire('fileProgress', $, message);\n          break;\n        case 'error':\n          $.abort();\n          _error = true;\n          $.chunks = [];\n          $.resumableObj.fire('fileError', $, message);\n          break;\n        case 'success':\n          if(_error) return;\n          $.resumableObj.fire('fileProgress', $); // it's at least progress\n          if($.isComplete()) {\n            $.resumableObj.fire('fileSuccess', $, message);\n          }\n          break;\n        case 'retry':\n          $.resumableObj.fire('fileRetry', $);\n          break;\n        }\n      };\n\n      // Main code to set up a file object with chunks,\n      // packaged to be able to handle retries if needed.\n      $.chunks = [];\n      $.abort = function(){\n        // Stop current uploads\n        var abortCount = 0;\n        $h.each($.chunks, function(c){\n          if(c.status()=='uploading') {\n            c.abort();\n            abortCount++;\n          }\n        });\n        if(abortCount>0) $.resumableObj.fire('fileProgress', $);\n      };\n      $.cancel = function(){\n        // Reset this file to be void\n        var _chunks = $.chunks;\n        $.chunks = [];\n        // Stop current uploads\n        $h.each(_chunks, function(c){\n          if(c.status()=='uploading')  {\n            c.abort();\n            $.resumableObj.uploadNextChunk();\n          }\n        });\n        $.resumableObj.removeFile($);\n        $.resumableObj.fire('fileProgress', $);\n      };\n      $.retry = function(){\n        $.bootstrap();\n        var firedRetry = false;\n        $.resumableObj.on('chunkingComplete', function(){\n          if(!firedRetry) $.resumableObj.upload();\n          firedRetry = true;\n        });\n      };\n      $.bootstrap = function(){\n        $.abort();\n        _error = false;\n        // Rebuild stack of chunks from file\n        $.chunks = [];\n        $._prevProgress = 0;\n        var round = $.getOpt('forceChunkSize') ? Math.ceil : Math.floor;\n        var maxOffset = Math.max(round($.file.size/$.getOpt('chunkSize')),1);\n        for (var offset=0; offset<maxOffset; offset++) {(function(offset){\n            window.setTimeout(function(){\n                $.chunks.push(new ResumableChunk($.resumableObj, $, offset, chunkEvent));\n                $.resumableObj.fire('chunkingProgress',$,offset/maxOffset);\n            },0);\n        })(offset)}\n        window.setTimeout(function(){\n            $.resumableObj.fire('chunkingComplete',$);\n        },0);\n      };\n      $.progress = function(){\n        if(_error) return(1);\n        // Sum up progress across everything\n        var ret = 0;\n        var error = false;\n        $h.each($.chunks, function(c){\n          if(c.status()=='error') error = true;\n          ret += c.progress(true); // get chunk progress relative to entire file\n        });\n        ret = (error ? 1 : (ret>0.99999 ? 1 : ret));\n        ret = Math.max($._prevProgress, ret); // We don't want to lose percentages when an upload is paused\n        $._prevProgress = ret;\n        return(ret);\n      };\n      $.isUploading = function(){\n        var uploading = false;\n        $h.each($.chunks, function(chunk){\n          if(chunk.status()=='uploading') {\n            uploading = true;\n            return(false);\n          }\n        });\n        return(uploading);\n      };\n      $.isComplete = function(){\n        var outstanding = false;\n        $h.each($.chunks, function(chunk){\n          var status = chunk.status();\n          if(status=='pending' || status=='uploading' || chunk.preprocessState === 1) {\n            outstanding = true;\n            return(false);\n          }\n        });\n        return(!outstanding);\n      };\n      $.pause = function(pause){\n          if(typeof(pause)==='undefined'){\n              $._pause = ($._pause ? false : true);\n          }else{\n              $._pause = pause;\n          }\n      };\n      $.isPaused = function() {\n        return $._pause;\n      };\n\n\n      // Bootstrap and return\n      $.resumableObj.fire('chunkingStart', $);\n      $.bootstrap();\n      return(this);\n    }\n\n\n    function ResumableChunk(resumableObj, fileObj, offset, callback){\n      var $ = this;\n      $.opts = {};\n      $.getOpt = resumableObj.getOpt;\n      $.resumableObj = resumableObj;\n      $.fileObj = fileObj;\n      $.fileObjSize = fileObj.size;\n      $.fileObjType = fileObj.file.type;\n      $.offset = offset;\n      $.callback = callback;\n      $.lastProgressCallback = (new Date);\n      $.tested = false;\n      $.retries = 0;\n      $.pendingRetry = false;\n      $.preprocessState = 0; // 0 = unprocessed, 1 = processing, 2 = finished\n\n      // Computed properties\n      var chunkSize = $.getOpt('chunkSize');\n      $.loaded = 0;\n      $.startByte = $.offset*chunkSize;\n      $.endByte = Math.min($.fileObjSize, ($.offset+1)*chunkSize);\n      if ($.fileObjSize-$.endByte < chunkSize && !$.getOpt('forceChunkSize')) {\n        // The last chunk will be bigger than the chunk size, but less than 2*chunkSize\n        $.endByte = $.fileObjSize;\n      }\n      $.xhr = null;\n\n      // test() makes a GET request without any data to see if the chunk has already been uploaded in a previous session\n      $.test = function(){\n        // Set up request and listen for event\n        $.xhr = new XMLHttpRequest();\n\n        var testHandler = function(e){\n          $.tested = true;\n          var status = $.status();\n          if(status=='success') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.send();\n          }\n        };\n        $.xhr.addEventListener('load', testHandler, false);\n        $.xhr.addEventListener('error', testHandler, false);\n        $.xhr.addEventListener('timeout', testHandler, false);\n\n        // Add data from the query options\n        var params = [];\n        var parameterNamespace = $.getOpt('parameterNamespace');\n        var customQuery = $.getOpt('query');\n        if(typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function(k,v){\n          params.push([encodeURIComponent(parameterNamespace+k), encodeURIComponent(v)].join('='));\n        });\n        // Add extra data to identify chunk\n        params = params.concat(\n          [\n            // define key/value pairs for additional parameters\n            ['chunkNumberParameterName', $.offset + 1],\n            ['chunkSizeParameterName', $.getOpt('chunkSize')],\n            ['currentChunkSizeParameterName', $.endByte - $.startByte],\n            ['totalSizeParameterName', $.fileObjSize],\n            ['typeParameterName', $.fileObjType],\n            ['identifierParameterName', $.fileObj.uniqueIdentifier],\n            ['fileNameParameterName', $.fileObj.fileName],\n            ['relativePathParameterName', $.fileObj.relativePath],\n            ['totalChunksParameterName', $.fileObj.chunks.length]\n          ].filter(function(pair){\n            // include items that resolve to truthy values\n            // i.e. exclude false, null, undefined and empty strings\n            return $.getOpt(pair[0]);\n          })\n          .map(function(pair){\n            // map each key/value pair to its final form\n            return [\n              parameterNamespace + $.getOpt(pair[0]),\n              encodeURIComponent(pair[1])\n            ].join('=');\n          })\n        );\n        // Append the relevant chunk and send it\n        $.xhr.open($.getOpt('testMethod'), $h.getTarget('test', params));\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials');\n        // Add data from header options\n        var customHeaders = $.getOpt('headers');\n        if(typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n        $h.each(customHeaders, function(k,v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n        $.xhr.send(null);\n      };\n\n      $.preprocessFinished = function(){\n        $.preprocessState = 2;\n        $.send();\n      };\n\n      // send() uploads the actual data in a POST call\n      $.send = function(){\n        var preprocess = $.getOpt('preprocess');\n        if(typeof preprocess === 'function') {\n          switch($.preprocessState) {\n          case 0: $.preprocessState = 1; preprocess($); return;\n          case 1: return;\n          case 2: break;\n          }\n        }\n        if($.getOpt('testChunks') && !$.tested) {\n          $.test();\n          return;\n        }\n\n        // Set up request and listen for event\n        $.xhr = new XMLHttpRequest();\n\n        // Progress\n        $.xhr.upload.addEventListener('progress', function(e){\n          if( (new Date) - $.lastProgressCallback > $.getOpt('throttleProgressCallbacks') * 1000 ) {\n            $.callback('progress');\n            $.lastProgressCallback = (new Date);\n          }\n          $.loaded=e.loaded||0;\n        }, false);\n        $.loaded = 0;\n        $.pendingRetry = false;\n        $.callback('progress');\n\n        // Done (either done, failed or retry)\n        var doneHandler = function(e){\n          var status = $.status();\n          if(status=='success'||status=='error') {\n            $.callback(status, $.message());\n            $.resumableObj.uploadNextChunk();\n          } else {\n            $.callback('retry', $.message());\n            $.abort();\n            $.retries++;\n            var retryInterval = $.getOpt('chunkRetryInterval');\n            if(retryInterval !== undefined) {\n              $.pendingRetry = true;\n              setTimeout($.send, retryInterval);\n            } else {\n              $.send();\n            }\n          }\n        };\n        $.xhr.addEventListener('load', doneHandler, false);\n        $.xhr.addEventListener('error', doneHandler, false);\n        $.xhr.addEventListener('timeout', doneHandler, false);\n\n        // Set up the basic query data from Resumable\n        var query = [\n          ['chunkNumberParameterName', $.offset + 1],\n          ['chunkSizeParameterName', $.getOpt('chunkSize')],\n          ['currentChunkSizeParameterName', $.endByte - $.startByte],\n          ['totalSizeParameterName', $.fileObjSize],\n          ['typeParameterName', $.fileObjType],\n          ['identifierParameterName', $.fileObj.uniqueIdentifier],\n          ['fileNameParameterName', $.fileObj.fileName],\n          ['relativePathParameterName', $.fileObj.relativePath],\n          ['totalChunksParameterName', $.fileObj.chunks.length],\n        ].filter(function(pair){\n          // include items that resolve to truthy values\n          // i.e. exclude false, null, undefined and empty strings\n          return $.getOpt(pair[0]);\n        })\n        .reduce(function(query, pair){\n          // assign query key/value\n          query[$.getOpt(pair[0])] = pair[1];\n          return query;\n        }, {});\n        // Mix in custom data\n        var customQuery = $.getOpt('query');\n        if(typeof customQuery == 'function') customQuery = customQuery($.fileObj, $);\n        $h.each(customQuery, function(k,v){\n          query[k] = v;\n        });\n\n        var func = ($.fileObj.file.slice ? 'slice' : ($.fileObj.file.mozSlice ? 'mozSlice' : ($.fileObj.file.webkitSlice ? 'webkitSlice' : 'slice')));\n        var bytes = $.fileObj.file[func]($.startByte, $.endByte, $.getOpt('setChunkTypeFromFile') ? $.fileObj.file.type : \"\");\n        var data = null;\n        var params = [];\n\n        var parameterNamespace = $.getOpt('parameterNamespace');\n                if ($.getOpt('method') === 'octet') {\n                    // Add data from the query options\n                    data = bytes;\n                    $h.each(query, function (k, v) {\n                        params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n                    });\n                } else {\n                    // Add data from the query options\n                    data = new FormData();\n                    $h.each(query, function (k, v) {\n                        data.append(parameterNamespace + k, v);\n                        params.push([encodeURIComponent(parameterNamespace + k), encodeURIComponent(v)].join('='));\n                    });\n                    if ($.getOpt('chunkFormat') == 'blob') {\n                        data.append(parameterNamespace + $.getOpt('fileParameterName'), bytes, $.fileObj.fileName);\n                    }\n                    else if ($.getOpt('chunkFormat') == 'base64') {\n                        var fr = new FileReader();\n                        fr.onload = function (e) {\n                            data.append(parameterNamespace + $.getOpt('fileParameterName'), fr.result);\n                            $.xhr.send(data);\n                        }\n                        fr.readAsDataURL(bytes);\n                    }\n                }\n\n        var target = $h.getTarget('upload', params);\n        var method = $.getOpt('uploadMethod');\n\n        $.xhr.open(method, target);\n        if ($.getOpt('method') === 'octet') {\n          $.xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n        }\n        $.xhr.timeout = $.getOpt('xhrTimeout');\n        $.xhr.withCredentials = $.getOpt('withCredentials');\n        // Add data from header options\n        var customHeaders = $.getOpt('headers');\n        if(typeof customHeaders === 'function') {\n          customHeaders = customHeaders($.fileObj, $);\n        }\n\n        $h.each(customHeaders, function(k,v) {\n          $.xhr.setRequestHeader(k, v);\n        });\n\n                if ($.getOpt('chunkFormat') == 'blob') {\n                    $.xhr.send(data);\n                }\n      };\n      $.abort = function(){\n        // Abort and reset\n        if($.xhr) $.xhr.abort();\n        $.xhr = null;\n      };\n      $.status = function(){\n        // Returns: 'pending', 'uploading', 'success', 'error'\n        if($.pendingRetry) {\n          // if pending retry then that's effectively the same as actively uploading,\n          // there might just be a slight delay before the retry starts\n          return('uploading');\n        } else if(!$.xhr) {\n          return('pending');\n        } else if($.xhr.readyState<4) {\n          // Status is really 'OPENED', 'HEADERS_RECEIVED' or 'LOADING' - meaning that stuff is happening\n          return('uploading');\n        } else {\n          if($.xhr.status == 200 || $.xhr.status == 201) {\n            // HTTP 200, 201 (created)\n            return('success');\n          } else if($h.contains($.getOpt('permanentErrors'), $.xhr.status) || $.retries >= $.getOpt('maxChunkRetries')) {\n            // HTTP 415/500/501, permanent error\n            return('error');\n          } else {\n            // this should never happen, but we'll reset and queue a retry\n            // a likely case for this would be 503 service unavailable\n            $.abort();\n            return('pending');\n          }\n        }\n      };\n      $.message = function(){\n        return($.xhr ? $.xhr.responseText : '');\n      };\n      $.progress = function(relative){\n        if(typeof(relative)==='undefined') relative = false;\n        var factor = (relative ? ($.endByte-$.startByte)/$.fileObjSize : 1);\n        if($.pendingRetry) return(0);\n        if(!$.xhr || !$.xhr.status) factor*=.95;\n        var s = $.status();\n        switch(s){\n        case 'success':\n        case 'error':\n          return(1*factor);\n        case 'pending':\n          return(0*factor);\n        default:\n          return($.loaded/($.endByte-$.startByte)*factor);\n        }\n      };\n      return(this);\n    }\n\n    // QUEUE\n    $.uploadNextChunk = function(){\n      var found = false;\n\n      // In some cases (such as videos) it's really handy to upload the first\n      // and last chunk of a file quickly; this let's the server check the file's\n      // metadata and determine if there's even a point in continuing.\n      if ($.getOpt('prioritizeFirstAndLastChunk')) {\n        $h.each($.files, function(file){\n          if(file.chunks.length && file.chunks[0].status()=='pending' && file.chunks[0].preprocessState === 0) {\n            file.chunks[0].send();\n            found = true;\n            return(false);\n          }\n          if(file.chunks.length>1 && file.chunks[file.chunks.length-1].status()=='pending' && file.chunks[file.chunks.length-1].preprocessState === 0) {\n            file.chunks[file.chunks.length-1].send();\n            found = true;\n            return(false);\n          }\n        });\n        if(found) return(true);\n      }\n\n      // Now, simply look for the next, best thing to upload\n      $h.each($.files, function(file){\n        if(file.isPaused()===false){\n         $h.each(file.chunks, function(chunk){\n           if(chunk.status()=='pending' && chunk.preprocessState === 0) {\n             chunk.send();\n             found = true;\n             return(false);\n           }\n          });\n        }\n        if(found) return(false);\n      });\n      if(found) return(true);\n\n      // The are no more outstanding chunks to upload, check is everything is done\n      var outstanding = false;\n      $h.each($.files, function(file){\n        if(!file.isComplete()) {\n          outstanding = true;\n          return(false);\n        }\n      });\n      if(!outstanding) {\n        // All chunks have been uploaded, complete\n        $.fire('complete');\n      }\n      return(false);\n    };\n\n\n    // PUBLIC METHODS FOR RESUMABLE.JS\n    $.assignBrowse = function(domNodes, isDirectory){\n      if(typeof(domNodes.length)=='undefined') domNodes = [domNodes];\n\n      $h.each(domNodes, function(domNode) {\n        var input;\n        if(domNode.tagName==='INPUT' && domNode.type==='file'){\n          input = domNode;\n        } else {\n          input = document.createElement('input');\n          input.setAttribute('type', 'file');\n          input.style.display = 'none';\n          domNode.addEventListener('click', function(){\n            input.style.opacity = 0;\n            input.style.display='block';\n            input.focus();\n            input.click();\n            input.style.display='none';\n          }, false);\n          domNode.appendChild(input);\n        }\n        var maxFiles = $.getOpt('maxFiles');\n        if (typeof(maxFiles)==='undefined'||maxFiles!=1){\n          input.setAttribute('multiple', 'multiple');\n        } else {\n          input.removeAttribute('multiple');\n        }\n        if(isDirectory){\n          input.setAttribute('webkitdirectory', 'webkitdirectory');\n        } else {\n          input.removeAttribute('webkitdirectory');\n        }\n        var fileTypes = $.getOpt('fileType');\n        if (typeof (fileTypes) !== 'undefined' && fileTypes.length >= 1) {\n          input.setAttribute('accept', fileTypes.map(function (e) { return '.' + e }).join(','));\n        }\n        else {\n          input.removeAttribute('accept');\n        }\n        // When new files are added, simply append them to the overall list\n        input.addEventListener('change', function(e){\n          appendFilesFromFileList(e.target.files,e);\n          var clearInput = $.getOpt('clearInput');\n          if (clearInput) {\n            e.target.value = '';\n          }\n        }, false);\n      });\n    };\n    $.assignDrop = function(domNodes){\n      if(typeof(domNodes.length)=='undefined') domNodes = [domNodes];\n\n      $h.each(domNodes, function(domNode) {\n        domNode.addEventListener('dragover', preventDefault, false);\n        domNode.addEventListener('dragenter', preventDefault, false);\n        domNode.addEventListener('drop', onDrop, false);\n      });\n    };\n    $.unAssignDrop = function(domNodes) {\n      if (typeof(domNodes.length) == 'undefined') domNodes = [domNodes];\n\n      $h.each(domNodes, function(domNode) {\n        domNode.removeEventListener('dragover', preventDefault);\n        domNode.removeEventListener('dragenter', preventDefault);\n        domNode.removeEventListener('drop', onDrop);\n      });\n    };\n    $.isUploading = function(){\n      var uploading = false;\n      $h.each($.files, function(file){\n        if (file.isUploading()) {\n          uploading = true;\n          return(false);\n        }\n      });\n      return(uploading);\n    };\n    $.upload = function(){\n      // Make sure we don't start too many uploads at once\n      if($.isUploading()) return;\n      // Kick off the queue\n      $.fire('uploadStart');\n      for (var num=1; num<=$.getOpt('simultaneousUploads'); num++) {\n        $.uploadNextChunk();\n      }\n    };\n    $.pause = function(){\n      // Resume all chunks currently being uploaded\n      $h.each($.files, function(file){\n        file.abort();\n      });\n      $.fire('pause');\n    };\n    $.cancel = function(){\n      $.fire('beforeCancel');\n      for(var i = $.files.length - 1; i >= 0; i--) {\n        $.files[i].cancel();\n      }\n      $.fire('cancel');\n    };\n    $.progress = function(){\n      var totalDone = 0;\n      var totalSize = 0;\n      // Resume all chunks currently being uploaded\n      $h.each($.files, function(file){\n        totalDone += file.progress()*file.size;\n        totalSize += file.size;\n      });\n      return(totalSize>0 ? totalDone/totalSize : 0);\n    };\n    $.addFile = function(file, event){\n      appendFilesFromFileList([file], event);\n    };\n    $.addFiles = function(files, event){\n      appendFilesFromFileList(files, event);\n    };\n    $.removeFile = function(file){\n      for(var i = $.files.length - 1; i >= 0; i--) {\n        if($.files[i] === file) {\n          $.files.splice(i, 1);\n        }\n      }\n    };\n    $.getFromUniqueIdentifier = function(uniqueIdentifier){\n      var ret = false;\n      $h.each($.files, function(f){\n        if(f.uniqueIdentifier==uniqueIdentifier) ret = f;\n      });\n      return(ret);\n    };\n    $.getSize = function(){\n      var totalSize = 0;\n      $h.each($.files, function(file){\n        totalSize += file.size;\n      });\n      return(totalSize);\n    };\n    $.handleDropEvent = function (e) {\n      onDrop(e);\n    };\n    $.handleChangeEvent = function (e) {\n      appendFilesFromFileList(e.target.files, e);\n      e.target.value = '';\n    };\n    $.updateQuery = function(query){\n        $.opts.query = query;\n    };\n\n    return(this);\n  };\n\n\n  // Node.js-style export for Node and Component\n  if (typeof module != 'undefined') {\n    module.exports = Resumable;\n  } else if (typeof define === \"function\" && define.amd) {\n    // AMD/requirejs: Define the module\n    define(function(){\n      return Resumable;\n    });\n  } else {\n    // Browser: Expose to window\n    window.Resumable = Resumable;\n  }\n\n})();\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC,YAAU;EACX,YAAY;;EAEV,IAAIA,SAAS,GAAG,SAAAA,CAASC,IAAI,EAAC;IAC5B,IAAK,EAAE,IAAI,YAAYD,SAAS,CAAC,EAAG;MAClC,OAAO,IAAIA,SAAS,CAACC,IAAI,CAAC;IAC5B;IACA,IAAI,CAACC,OAAO,GAAG,GAAG;IAClB;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACC,OAAO,GACI,OAAOC,IAAK,KAAG,WAAW,IAE1B,OAAOC,IAAK,KAAG,WAAY,IAE3B,OAAOC,QAAS,KAAG,WAAY,KAE/B,CAAC,CAACD,IAAI,CAACE,SAAS,CAACC,WAAW,IAAE,CAAC,CAACH,IAAI,CAACE,SAAS,CAACE,QAAQ,IAAE,CAAC,CAACJ,IAAI,CAACE,SAAS,CAACG,KAAK,IAAE,KAAK,CACtF;IAChB,IAAG,CAAC,IAAI,CAACP,OAAO,EAAE,OAAO,KAAK;;IAG9B;IACA,IAAIQ,CAAC,GAAG,IAAI;IACZA,CAAC,CAACC,KAAK,GAAG,EAAE;IACZD,CAAC,CAACE,QAAQ,GAAG;MACXC,SAAS,EAAC,CAAC,GAAC,IAAI,GAAC,IAAI;MACrBC,cAAc,EAAC,KAAK;MACpBC,mBAAmB,EAAC,CAAC;MACrBC,iBAAiB,EAAC,MAAM;MACxBC,wBAAwB,EAAE,sBAAsB;MAChDC,sBAAsB,EAAE,oBAAoB;MAC5CC,6BAA6B,EAAE,2BAA2B;MAC1DC,sBAAsB,EAAE,oBAAoB;MAC5CC,iBAAiB,EAAE,eAAe;MAClCC,uBAAuB,EAAE,qBAAqB;MAC9CC,qBAAqB,EAAE,mBAAmB;MAC1CC,yBAAyB,EAAE,uBAAuB;MAClDC,wBAAwB,EAAE,sBAAsB;MAChDC,yBAAyB,EAAE,GAAG;MAC9BC,KAAK,EAAC,CAAC,CAAC;MACRC,OAAO,EAAC,CAAC,CAAC;MACVC,UAAU,EAAC,IAAI;MACfC,MAAM,EAAC,WAAW;MAClBC,YAAY,EAAE,MAAM;MACpBC,UAAU,EAAE,KAAK;MACjBC,2BAA2B,EAAC,KAAK;MACjCC,MAAM,EAAC,GAAG;MACVC,UAAU,EAAE,IAAI;MAChBC,kBAAkB,EAAC,EAAE;MACrBC,UAAU,EAAC,IAAI;MACfC,wBAAwB,EAAC,IAAI;MAC7BC,SAAS,EAAC,IAAI;MACdC,eAAe,EAAC,GAAG;MACnBC,kBAAkB,EAACC,SAAS;MAC5BC,eAAe,EAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;MACzCC,QAAQ,EAACF,SAAS;MAClBG,eAAe,EAAC,KAAK;MACrBC,UAAU,EAAC,CAAC;MACZC,UAAU,EAAC,IAAI;MACfC,WAAW,EAAC,MAAM;MAClBC,oBAAoB,EAAC,KAAK;MAC1BC,qBAAqB,EAAC,SAAAA,CAAUvC,KAAK,EAAEwC,UAAU,EAAE;QACjD,IAAIP,QAAQ,GAAGlC,CAAC,CAAC0C,MAAM,CAAC,UAAU,CAAC;QACnCC,KAAK,CAAC,6BAA6B,GAAGT,QAAQ,GAAG,OAAO,IAAIA,QAAQ,KAAK,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,GAAG,aAAa,CAAC;MACzG,CAAC;MACDU,WAAW,EAAC,CAAC;MACbC,wBAAwB,EAAC,SAAAA,CAASC,IAAI,EAAEL,UAAU,EAAE;QAClDE,KAAK,CAACG,IAAI,CAACC,QAAQ,IAAED,IAAI,CAACE,IAAI,GAAE,iDAAiD,GAAGC,EAAE,CAACC,UAAU,CAAClD,CAAC,CAAC0C,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,GAAG,CAAC;MACnI,CAAC;MACDS,WAAW,EAACnB,SAAS;MACrBoB,wBAAwB,EAAC,SAAAA,CAASN,IAAI,EAAEL,UAAU,EAAE;QAClDE,KAAK,CAACG,IAAI,CAACC,QAAQ,IAAED,IAAI,CAACE,IAAI,GAAE,+CAA+C,GAAGC,EAAE,CAACC,UAAU,CAAClD,CAAC,CAAC0C,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,GAAG,CAAC;MACjI,CAAC;MACDW,QAAQ,EAAE,EAAE;MACZC,qBAAqB,EAAE,SAAAA,CAASR,IAAI,EAAEL,UAAU,EAAE;QAChDE,KAAK,CAACG,IAAI,CAACC,QAAQ,IAAED,IAAI,CAACE,IAAI,GAAE,qDAAqD,GAAGhD,CAAC,CAAC0C,MAAM,CAAC,UAAU,CAAC,GAAG,GAAG,CAAC;MACrH;IACF,CAAC;IACD1C,CAAC,CAACV,IAAI,GAAGA,IAAI,IAAE,CAAC,CAAC;IACjBU,CAAC,CAAC0C,MAAM,GAAG,UAASa,CAAC,EAAE;MACrB,IAAIC,IAAI,GAAG,IAAI;MACf;MACA,IAAGD,CAAC,YAAYE,KAAK,EAAE;QACrB,IAAIC,OAAO,GAAG,CAAC,CAAC;QAChBT,EAAE,CAACU,IAAI,CAACJ,CAAC,EAAE,UAASK,MAAM,EAAC;UACzBF,OAAO,CAACE,MAAM,CAAC,GAAGJ,IAAI,CAACd,MAAM,CAACkB,MAAM,CAAC;QACvC,CAAC,CAAC;QACF,OAAOF,OAAO;MAChB;MACA;MACA,IAAIF,IAAI,YAAYK,cAAc,EAAE;QAClC,IAAI,OAAOL,IAAI,CAAClE,IAAI,CAACiE,CAAC,CAAC,KAAK,WAAW,EAAE;UAAE,OAAOC,IAAI,CAAClE,IAAI,CAACiE,CAAC,CAAC;QAAE,CAAC,MAC5D;UAAEC,IAAI,GAAGA,IAAI,CAACM,OAAO;QAAE;MAC9B;MACA,IAAIN,IAAI,YAAYO,aAAa,EAAE;QACjC,IAAI,OAAOP,IAAI,CAAClE,IAAI,CAACiE,CAAC,CAAC,KAAK,WAAW,EAAE;UAAE,OAAOC,IAAI,CAAClE,IAAI,CAACiE,CAAC,CAAC;QAAE,CAAC,MAC5D;UAAEC,IAAI,GAAGA,IAAI,CAACQ,YAAY;QAAE;MACnC;MACA,IAAIR,IAAI,YAAYnE,SAAS,EAAE;QAC7B,IAAI,OAAOmE,IAAI,CAAClE,IAAI,CAACiE,CAAC,CAAC,KAAK,WAAW,EAAE;UAAE,OAAOC,IAAI,CAAClE,IAAI,CAACiE,CAAC,CAAC;QAAE,CAAC,MAC5D;UAAE,OAAOC,IAAI,CAACtD,QAAQ,CAACqD,CAAC,CAAC;QAAE;MAClC;IACF,CAAC;;IAED;IACA;IACA;IACA;IACAvD,CAAC,CAACiE,MAAM,GAAG,EAAE;IACbjE,CAAC,CAACkE,EAAE,GAAG,UAASC,KAAK,EAACC,QAAQ,EAAC;MAC7BpE,CAAC,CAACiE,MAAM,CAACI,IAAI,CAACF,KAAK,CAACG,WAAW,CAAC,CAAC,EAAEF,QAAQ,CAAC;IAC9C,CAAC;IACDpE,CAAC,CAACuE,IAAI,GAAG,YAAU;MACjB;MACA,IAAIC,IAAI,GAAG,EAAE;MACb,KAAK,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACC,SAAS,CAACC,MAAM,EAAEF,CAAC,EAAE,EAAED,IAAI,CAACH,IAAI,CAACK,SAAS,CAACD,CAAC,CAAC,CAAC;MAC9D;MACA,IAAIN,KAAK,GAAGK,IAAI,CAAC,CAAC,CAAC,CAACF,WAAW,CAAC,CAAC;MACjC,KAAK,IAAIG,CAAC,GAAC,CAAC,EAAEA,CAAC,IAAEzE,CAAC,CAACiE,MAAM,CAACU,MAAM,EAAEF,CAAC,IAAE,CAAC,EAAE;QACtC,IAAGzE,CAAC,CAACiE,MAAM,CAACQ,CAAC,CAAC,IAAEN,KAAK,EAAEnE,CAAC,CAACiE,MAAM,CAACQ,CAAC,GAAC,CAAC,CAAC,CAACG,KAAK,CAAC5E,CAAC,EAACwE,IAAI,CAACzE,KAAK,CAAC,CAAC,CAAC,CAAC;QAC3D,IAAGC,CAAC,CAACiE,MAAM,CAACQ,CAAC,CAAC,IAAE,UAAU,EAAEzE,CAAC,CAACiE,MAAM,CAACQ,CAAC,GAAC,CAAC,CAAC,CAACG,KAAK,CAAC,IAAI,EAACJ,IAAI,CAAC;MAC5D;MACA,IAAGL,KAAK,IAAE,WAAW,EAAEnE,CAAC,CAACuE,IAAI,CAAC,OAAO,EAAEC,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;MACxD,IAAGL,KAAK,IAAE,cAAc,EAAEnE,CAAC,CAACuE,IAAI,CAAC,UAAU,CAAC;IAC9C,CAAC;;IAGD;IACA,IAAItB,EAAE,GAAG;MACP4B,SAAS,EAAE,SAAAA,CAASC,CAAC,EAAC;QACpBA,CAAC,CAACC,eAAe,CAAC,CAAC;QACnBD,CAAC,CAACE,cAAc,CAAC,CAAC;MACpB,CAAC;MACDrB,IAAI,EAAE,SAAAA,CAASJ,CAAC,EAACa,QAAQ,EAAC;QACxB,IAAG,OAAOb,CAAC,CAACoB,MAAO,KAAG,WAAW,EAAE;UACjC,KAAK,IAAIF,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAClB,CAAC,CAACoB,MAAM,EAAEF,CAAC,EAAE,EAAE;YAC7B;YACA,IAAGL,QAAQ,CAACb,CAAC,CAACkB,CAAC,CAAC,CAAC,KAAG,KAAK,EAAE;UAC7B;QACF,CAAC,MAAM;UACL,KAAKA,CAAC,IAAIlB,CAAC,EAAE;YACX;YACA,IAAGa,QAAQ,CAACK,CAAC,EAAClB,CAAC,CAACkB,CAAC,CAAC,CAAC,KAAG,KAAK,EAAE;UAC/B;QACF;MACF,CAAC;MACD7C,wBAAwB,EAAC,SAAAA,CAASkB,IAAI,EAAEqB,KAAK,EAAC;QAC5C,IAAIc,MAAM,GAAGjF,CAAC,CAAC0C,MAAM,CAAC,0BAA0B,CAAC;QACjD,IAAG,OAAOuC,MAAM,KAAK,UAAU,EAAE;UAC/B,OAAOA,MAAM,CAACnC,IAAI,EAAEqB,KAAK,CAAC;QAC5B;QACA,IAAIe,YAAY,GAAGpC,IAAI,CAACqC,kBAAkB,IAAErC,IAAI,CAACC,QAAQ,IAAED,IAAI,CAACE,IAAI,CAAC,CAAC;QACtE,IAAIoC,IAAI,GAAGtC,IAAI,CAACsC,IAAI;QACpB,OAAOA,IAAI,GAAG,GAAG,GAAGF,YAAY,CAACG,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC;MACnE,CAAC;MACDC,QAAQ,EAAC,SAAAA,CAASC,KAAK,EAACC,IAAI,EAAE;QAC5B,IAAIC,MAAM,GAAG,KAAK;QAElBxC,EAAE,CAACU,IAAI,CAAC4B,KAAK,EAAE,UAASG,KAAK,EAAE;UAC7B,IAAIA,KAAK,IAAIF,IAAI,EAAE;YACjBC,MAAM,GAAG,IAAI;YACb,OAAO,KAAK;UACd;UACA,OAAO,IAAI;QACb,CAAC,CAAC;QAEF,OAAOA,MAAM;MACf,CAAC;MACDvC,UAAU,EAAC,SAAAA,CAASkC,IAAI,EAAC;QACvB,IAAGA,IAAI,GAAC,IAAI,EAAE;UACZ,OAAOA,IAAI,GAAG,QAAQ;QACxB,CAAC,MAAM,IAAGA,IAAI,GAAC,IAAI,GAAC,IAAI,EAAE;UACxB,OAAO,CAACA,IAAI,GAAC,MAAM,EAAEO,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK;QACzC,CAAC,MAAM,IAAGP,IAAI,GAAC,IAAI,GAAC,IAAI,GAAC,IAAI,EAAE;UAC7B,OAAO,CAACA,IAAI,GAAC,MAAM,GAAC,MAAM,EAAEO,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK;QAChD,CAAC,MAAM;UACL,OAAO,CAACP,IAAI,GAAC,MAAM,GAAC,MAAM,GAAC,MAAM,EAAEO,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK;QACvD;MACF,CAAC;MACD9D,SAAS,EAAC,SAAAA,CAAS+D,OAAO,EAAEC,MAAM,EAAC;QACjC,IAAIrE,MAAM,GAAGxB,CAAC,CAAC0C,MAAM,CAAC,QAAQ,CAAC;QAE/B,IAAIkD,OAAO,KAAK,MAAM,IAAI5F,CAAC,CAAC0C,MAAM,CAAC,YAAY,CAAC,EAAE;UAChDlB,MAAM,GAAGxB,CAAC,CAAC0C,MAAM,CAAC,YAAY,CAAC,KAAK,GAAG,GAAG1C,CAAC,CAAC0C,MAAM,CAAC,QAAQ,CAAC,GAAG1C,CAAC,CAAC0C,MAAM,CAAC,YAAY,CAAC;QACvF;QAEA,IAAI,OAAOlB,MAAM,KAAK,UAAU,EAAE;UAChC,OAAOA,MAAM,CAACqE,MAAM,CAAC;QACvB;QAEA,IAAIC,SAAS,GAAGtE,MAAM,CAACuE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG;QACnD,IAAIC,YAAY,GAAGH,MAAM,CAACI,IAAI,CAAC,GAAG,CAAC;QAEnC,OAAOzE,MAAM,GAAGsE,SAAS,GAAGE,YAAY;MAC1C;IACF,CAAC;IAED,IAAIE,MAAM,GAAG,SAAAA,CAAS/B,KAAK,EAAC;MAC1BlB,EAAE,CAAC4B,SAAS,CAACV,KAAK,CAAC;;MAEnB;MACA,IAAIA,KAAK,CAACgC,YAAY,IAAIhC,KAAK,CAACgC,YAAY,CAACC,KAAK,EAAE;QAClDC,SAAS,CAAClC,KAAK,CAACgC,YAAY,CAACC,KAAK,EAAEjC,KAAK,CAAC;MAC5C;MACA;MAAA,KACK,IAAIA,KAAK,CAACgC,YAAY,IAAIhC,KAAK,CAACgC,YAAY,CAAClG,KAAK,EAAE;QACvDoG,SAAS,CAAClC,KAAK,CAACgC,YAAY,CAAClG,KAAK,EAAEkE,KAAK,CAAC;MAC5C;IACF,CAAC;IACD,IAAIa,cAAc,GAAG,SAAAA,CAASF,CAAC,EAAE;MAC/BA,CAAC,CAACE,cAAc,CAAC,CAAC;IACpB,CAAC;;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,SAASsB,WAAWA,CAACC,IAAI,EAAEC,IAAI,EAAEJ,KAAK,EAAEK,EAAE,EAAE;MAC1C,IAAIC,KAAK;MACT,IAAGH,IAAI,CAACI,MAAM,EAAC;QACb;QACA,OAAOJ,IAAI,CAACzD,IAAI,CAAC,UAASA,IAAI,EAAC;UAC7BA,IAAI,CAACoC,YAAY,GAAGsB,IAAI,GAAG1D,IAAI,CAACE,IAAI;UACpCoD,KAAK,CAAC/B,IAAI,CAACvB,IAAI,CAAC;UAChB2D,EAAE,CAAC,CAAC;QACN,CAAC,CAAC;MACJ,CAAC,MAAK,IAAGF,IAAI,CAACK,WAAW,EAAC;QACxB;QACAF,KAAK,GAAGH,IAAI;MACd,CAAC,MAAK,IAAGA,IAAI,YAAY9G,IAAI,EAAE;QAC7B2G,KAAK,CAAC/B,IAAI,CAACkC,IAAI,CAAC;MAClB;MACA,IAAG,UAAU,KAAK,OAAOA,IAAI,CAACM,gBAAgB,EAAC;QAC7C;QACAH,KAAK,GAAGH,IAAI,CAACM,gBAAgB,CAAC,CAAC;MACjC;MACA,IAAGH,KAAK,IAAIA,KAAK,CAACE,WAAW,EAAC;QAC5B;QACA,OAAOE,gBAAgB,CAACJ,KAAK,EAAEF,IAAI,GAAGE,KAAK,CAAC1D,IAAI,GAAG,GAAG,EAAEoD,KAAK,EAAEK,EAAE,CAAC;MACpE;MACA,IAAG,UAAU,KAAK,OAAOF,IAAI,CAACQ,SAAS,EAAC;QACtC;QACAR,IAAI,GAAGA,IAAI,CAACQ,SAAS,CAAC,CAAC;QACvB,IAAGR,IAAI,YAAY9G,IAAI,EAAE;UACvB8G,IAAI,CAACrB,YAAY,GAAGsB,IAAI,GAAGD,IAAI,CAACvD,IAAI;UACpCoD,KAAK,CAAC/B,IAAI,CAACkC,IAAI,CAAC;QAClB;MACF;MACAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACR;;IAGA;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,SAASO,gBAAgBA,CAACZ,KAAK,EAAEK,EAAE,EAAC;MAClC,IAAG,CAACL,KAAK,IAAIA,KAAK,CAACzB,MAAM,KAAK,CAAC,EAAC;QAC9B;QACA,OAAO8B,EAAE,CAAC,CAAC;MACb;MACA;MACAL,KAAK,CAAC,CAAC,CAAC,CAAC,YAAU;QACjBY,gBAAgB,CAACZ,KAAK,CAACrG,KAAK,CAAC,CAAC,CAAC,EAAE0G,EAAE,CAAC;MACtC,CAAC,CAAC;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,SAASK,gBAAgBA,CAAEG,SAAS,EAAET,IAAI,EAAEJ,KAAK,EAAEK,EAAE,EAAE;MACrD,IAAIS,SAAS,GAAGD,SAAS,CAACE,YAAY,CAAC,CAAC;MACxCD,SAAS,CAACE,WAAW,CAAC,UAASC,OAAO,EAAC;QACrC,IAAG,CAACA,OAAO,CAAC1C,MAAM,EAAC;UACjB;UACA,OAAO8B,EAAE,CAAC,CAAC;QACb;QACA;QACAO,gBAAgB,CACdK,OAAO,CAACC,GAAG,CAAC,UAASZ,KAAK,EAAC;UACzB;UACA,OAAOJ,WAAW,CAACiB,IAAI,CAAC,IAAI,EAAEb,KAAK,EAAEF,IAAI,EAAEJ,KAAK,CAAC;QACnD,CAAC,CAAC,EACFK,EACF,CAAC;MACH,CAAC,CAAC;IACJ;;IAEA;AACJ;AACA;AACA;AACA;IACI,SAASJ,SAASA,CAACD,KAAK,EAAEjC,KAAK,EAAE;MAC/B,IAAG,CAACiC,KAAK,CAACzB,MAAM,EAAC;QACf,OAAO,CAAC;MACV;MACA3E,CAAC,CAACuE,IAAI,CAAC,WAAW,CAAC;MACnB,IAAItE,KAAK,GAAG,EAAE;MACd+G,gBAAgB,CACZvD,KAAK,CAAC7D,SAAS,CAAC0H,GAAG,CAACE,IAAI,CAACpB,KAAK,EAAE,UAASG,IAAI,EAAC;QAC5C;QACA,OAAOD,WAAW,CAACiB,IAAI,CAAC,IAAI,EAAEhB,IAAI,EAAE,EAAE,EAAEtG,KAAK,CAAC;MAChD,CAAC,CAAC,EACF,YAAU;QACR,IAAGA,KAAK,CAAC0E,MAAM,EAAC;UACd;UACA8C,uBAAuB,CAACxH,KAAK,EAAEkE,KAAK,CAAC;QACvC;MACF,CACJ,CAAC;IACH;IAAC;IAED,IAAIsD,uBAAuB,GAAG,SAAAA,CAASC,QAAQ,EAAEvD,KAAK,EAAC;MACrD;MACA,IAAI1B,UAAU,GAAG,CAAC;MAClB,IAAIc,CAAC,GAAGvD,CAAC,CAAC0C,MAAM,CAAC,CAAC,UAAU,EAAE,aAAa,EAAE,aAAa,EAAE,uBAAuB,EAAE,0BAA0B,EAAE,0BAA0B,EAAE,UAAU,EAAE,uBAAuB,CAAC,CAAC;MAClL,IAAI,OAAOa,CAAC,CAACrB,QAAS,KAAG,WAAW,IAAIqB,CAAC,CAACrB,QAAQ,GAAEwF,QAAQ,CAAC/C,MAAM,GAAC3E,CAAC,CAACC,KAAK,CAAC0E,MAAO,EAAE;QACnF;QACA,IAAIpB,CAAC,CAACrB,QAAQ,KAAG,CAAC,IAAIlC,CAAC,CAACC,KAAK,CAAC0E,MAAM,KAAG,CAAC,IAAI+C,QAAQ,CAAC/C,MAAM,KAAG,CAAC,EAAE;UAC/D3E,CAAC,CAAC2H,UAAU,CAAC3H,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC,MAAM;UACLsD,CAAC,CAACf,qBAAqB,CAACkF,QAAQ,EAAEjF,UAAU,EAAE,CAAC;UAC/C,OAAO,KAAK;QACd;MACF;MACA,IAAIxC,KAAK,GAAG,EAAE;QAAE2H,YAAY,GAAG,EAAE;QAAEC,SAAS,GAAGH,QAAQ,CAAC/C,MAAM;MAC9D,IAAImD,iBAAiB,GAAG,SAAAA,CAAA,EAAU;QAChC,IAAG,CAAC,GAAED,SAAS,EAAC;UACd;UACA,IAAG,CAAC5H,KAAK,CAAC0E,MAAM,IAAI,CAACiD,YAAY,CAACjD,MAAM,EAAC;YACvC;YACA;UACF;UACAoD,MAAM,CAACC,UAAU,CAAC,YAAU;YAC1BhI,CAAC,CAACuE,IAAI,CAAC,YAAY,EAAEtE,KAAK,EAAE2H,YAAY,CAAC;UAC3C,CAAC,EAAC,CAAC,CAAC;QACN;MACF,CAAC;MACD3E,EAAE,CAACU,IAAI,CAAC+D,QAAQ,EAAE,UAAS5E,IAAI,EAAC;QAC9B,IAAIC,QAAQ,GAAGD,IAAI,CAACE,IAAI;QACxB,IAAGO,CAAC,CAACF,QAAQ,CAACsB,MAAM,GAAG,CAAC,EAAC;UACvB,IAAIsD,aAAa,GAAG,KAAK;UACzB,KAAI,IAAIC,KAAK,IAAI3E,CAAC,CAACF,QAAQ,EAAC;YAC1B,IAAI8E,SAAS,GAAG,GAAG,GAAG5E,CAAC,CAACF,QAAQ,CAAC6E,KAAK,CAAC;YAChD,IAAGnF,QAAQ,CAACuB,WAAW,CAAC,CAAC,CAACyB,OAAO,CAACoC,SAAS,CAAC7D,WAAW,CAAC,CAAC,EAAEvB,QAAQ,CAAC4B,MAAM,GAAGwD,SAAS,CAACxD,MAAM,CAAC,KAAK,CAAC,CAAC,EAAC;cAC3FsD,aAAa,GAAG,IAAI;cACpB;YACF;UACF;UACA,IAAI,CAACA,aAAa,EAAE;YAClB1E,CAAC,CAACD,qBAAqB,CAACR,IAAI,EAAEL,UAAU,EAAE,CAAC;YAC3C,OAAO,KAAK;UACd;QACF;QAEA,IAAI,OAAOc,CAAC,CAACX,WAAY,KAAG,WAAW,IAAIE,IAAI,CAACsC,IAAI,GAAC7B,CAAC,CAACX,WAAW,EAAE;UAClEW,CAAC,CAACV,wBAAwB,CAACC,IAAI,EAAEL,UAAU,EAAE,CAAC;UAC9C,OAAO,KAAK;QACd;QACA,IAAI,OAAOc,CAAC,CAACJ,WAAY,KAAG,WAAW,IAAIL,IAAI,CAACsC,IAAI,GAAC7B,CAAC,CAACJ,WAAW,EAAE;UAClEI,CAAC,CAACH,wBAAwB,CAACN,IAAI,EAAEL,UAAU,EAAE,CAAC;UAC9C,OAAO,KAAK;QACd;QAEA,SAAS2F,OAAOA,CAACC,gBAAgB,EAAC;UAChC,IAAI,CAACrI,CAAC,CAACsI,uBAAuB,CAACD,gBAAgB,CAAC,EAAE;YAAC,CAAC,YAAU;cAC5DvF,IAAI,CAACuF,gBAAgB,GAAGA,gBAAgB;cACxC,IAAIE,CAAC,GAAG,IAAIxE,aAAa,CAAC/D,CAAC,EAAE8C,IAAI,EAAEuF,gBAAgB,CAAC;cACpDrI,CAAC,CAACC,KAAK,CAACoE,IAAI,CAACkE,CAAC,CAAC;cACftI,KAAK,CAACoE,IAAI,CAACkE,CAAC,CAAC;cACbA,CAAC,CAACC,SAAS,GAAI,OAAOrE,KAAK,IAAI,WAAW,GAAGA,KAAK,CAACsE,UAAU,GAAG,IAAK;cACrEV,MAAM,CAACC,UAAU,CAAC,YAAU;gBAC1BhI,CAAC,CAACuE,IAAI,CAAC,WAAW,EAAEgE,CAAC,EAAEpE,KAAK,CAAC;cAC/B,CAAC,EAAC,CAAC,CAAC;YACN,CAAC,EAAE,CAAC;UAAA,CAAC,MAAM;YACTyD,YAAY,CAACvD,IAAI,CAACvB,IAAI,CAAC;UACzB;UAAC;UACDgF,iBAAiB,CAAC,CAAC;QACrB;QACA;QACA,IAAIO,gBAAgB,GAAGpF,EAAE,CAACrB,wBAAwB,CAACkB,IAAI,EAAEqB,KAAK,CAAC;QAC/D,IAAGkE,gBAAgB,IAAI,OAAOA,gBAAgB,CAACK,IAAI,KAAK,UAAU,EAAC;UACjE;UACAL,gBAAgB,CACfK,IAAI,CACH,UAASL,gBAAgB,EAAC;YACxB;YACAD,OAAO,CAACC,gBAAgB,CAAC;UAC3B,CAAC,EACF,YAAU;YACP;YACA;YACAP,iBAAiB,CAAC,CAAC;UACrB,CACF,CAAC;QACH,CAAC,MAAI;UACH;UACAM,OAAO,CAACC,gBAAgB,CAAC;QAC3B;MACF,CAAC,CAAC;IACJ,CAAC;;IAED;IACA,SAAStE,aAAaA,CAACC,YAAY,EAAElB,IAAI,EAAEuF,gBAAgB,EAAC;MAC1D,IAAIrI,CAAC,GAAG,IAAI;MACZA,CAAC,CAACV,IAAI,GAAG,CAAC,CAAC;MACXU,CAAC,CAAC0C,MAAM,GAAGsB,YAAY,CAACtB,MAAM;MAC9B1C,CAAC,CAAC2I,aAAa,GAAG,CAAC;MACnB3I,CAAC,CAACgE,YAAY,GAAGA,YAAY;MAC7BhE,CAAC,CAAC8C,IAAI,GAAGA,IAAI;MACb9C,CAAC,CAAC+C,QAAQ,GAAGD,IAAI,CAACC,QAAQ,IAAED,IAAI,CAACE,IAAI,CAAC,CAAC;MACvChD,CAAC,CAACoF,IAAI,GAAGtC,IAAI,CAACsC,IAAI;MAClBpF,CAAC,CAACkF,YAAY,GAAGpC,IAAI,CAACoC,YAAY,IAAIpC,IAAI,CAACqC,kBAAkB,IAAInF,CAAC,CAAC+C,QAAQ;MAC3E/C,CAAC,CAACqI,gBAAgB,GAAGA,gBAAgB;MACrCrI,CAAC,CAAC4I,MAAM,GAAG,KAAK;MAChB5I,CAAC,CAACwI,SAAS,GAAG,EAAE;MAChB,IAAIK,MAAM,GAAGR,gBAAgB,KAAKrG,SAAS;;MAE3C;MACA,IAAI8G,UAAU,GAAG,SAAAA,CAAS3E,KAAK,EAAE4E,OAAO,EAAC;QACvC;QACA,QAAO5E,KAAK;UACZ,KAAK,UAAU;YACbnE,CAAC,CAACgE,YAAY,CAACO,IAAI,CAAC,cAAc,EAAEvE,CAAC,EAAE+I,OAAO,CAAC;YAC/C;UACF,KAAK,OAAO;YACV/I,CAAC,CAACgJ,KAAK,CAAC,CAAC;YACTH,MAAM,GAAG,IAAI;YACb7I,CAAC,CAACiJ,MAAM,GAAG,EAAE;YACbjJ,CAAC,CAACgE,YAAY,CAACO,IAAI,CAAC,WAAW,EAAEvE,CAAC,EAAE+I,OAAO,CAAC;YAC5C;UACF,KAAK,SAAS;YACZ,IAAGF,MAAM,EAAE;YACX7I,CAAC,CAACgE,YAAY,CAACO,IAAI,CAAC,cAAc,EAAEvE,CAAC,CAAC,CAAC,CAAC;YACxC,IAAGA,CAAC,CAACkJ,UAAU,CAAC,CAAC,EAAE;cACjBlJ,CAAC,CAACgE,YAAY,CAACO,IAAI,CAAC,aAAa,EAAEvE,CAAC,EAAE+I,OAAO,CAAC;YAChD;YACA;UACF,KAAK,OAAO;YACV/I,CAAC,CAACgE,YAAY,CAACO,IAAI,CAAC,WAAW,EAAEvE,CAAC,CAAC;YACnC;QACF;MACF,CAAC;;MAED;MACA;MACAA,CAAC,CAACiJ,MAAM,GAAG,EAAE;MACbjJ,CAAC,CAACgJ,KAAK,GAAG,YAAU;QAClB;QACA,IAAIG,UAAU,GAAG,CAAC;QAClBlG,EAAE,CAACU,IAAI,CAAC3D,CAAC,CAACiJ,MAAM,EAAE,UAASG,CAAC,EAAC;UAC3B,IAAGA,CAAC,CAACC,MAAM,CAAC,CAAC,IAAE,WAAW,EAAE;YAC1BD,CAAC,CAACJ,KAAK,CAAC,CAAC;YACTG,UAAU,EAAE;UACd;QACF,CAAC,CAAC;QACF,IAAGA,UAAU,GAAC,CAAC,EAAEnJ,CAAC,CAACgE,YAAY,CAACO,IAAI,CAAC,cAAc,EAAEvE,CAAC,CAAC;MACzD,CAAC;MACDA,CAAC,CAACsJ,MAAM,GAAG,YAAU;QACnB;QACA,IAAIC,OAAO,GAAGvJ,CAAC,CAACiJ,MAAM;QACtBjJ,CAAC,CAACiJ,MAAM,GAAG,EAAE;QACb;QACAhG,EAAE,CAACU,IAAI,CAAC4F,OAAO,EAAE,UAASH,CAAC,EAAC;UAC1B,IAAGA,CAAC,CAACC,MAAM,CAAC,CAAC,IAAE,WAAW,EAAG;YAC3BD,CAAC,CAACJ,KAAK,CAAC,CAAC;YACThJ,CAAC,CAACgE,YAAY,CAACwF,eAAe,CAAC,CAAC;UAClC;QACF,CAAC,CAAC;QACFxJ,CAAC,CAACgE,YAAY,CAAC2D,UAAU,CAAC3H,CAAC,CAAC;QAC5BA,CAAC,CAACgE,YAAY,CAACO,IAAI,CAAC,cAAc,EAAEvE,CAAC,CAAC;MACxC,CAAC;MACDA,CAAC,CAACyJ,KAAK,GAAG,YAAU;QAClBzJ,CAAC,CAAC0J,SAAS,CAAC,CAAC;QACb,IAAIC,UAAU,GAAG,KAAK;QACtB3J,CAAC,CAACgE,YAAY,CAACE,EAAE,CAAC,kBAAkB,EAAE,YAAU;UAC9C,IAAG,CAACyF,UAAU,EAAE3J,CAAC,CAACgE,YAAY,CAAC4F,MAAM,CAAC,CAAC;UACvCD,UAAU,GAAG,IAAI;QACnB,CAAC,CAAC;MACJ,CAAC;MACD3J,CAAC,CAAC0J,SAAS,GAAG,YAAU;QACtB1J,CAAC,CAACgJ,KAAK,CAAC,CAAC;QACTH,MAAM,GAAG,KAAK;QACd;QACA7I,CAAC,CAACiJ,MAAM,GAAG,EAAE;QACbjJ,CAAC,CAAC2I,aAAa,GAAG,CAAC;QACnB,IAAIkB,KAAK,GAAG7J,CAAC,CAAC0C,MAAM,CAAC,gBAAgB,CAAC,GAAGoH,IAAI,CAACC,IAAI,GAAGD,IAAI,CAACE,KAAK;QAC/D,IAAIC,SAAS,GAAGH,IAAI,CAACI,GAAG,CAACL,KAAK,CAAC7J,CAAC,CAAC8C,IAAI,CAACsC,IAAI,GAACpF,CAAC,CAAC0C,MAAM,CAAC,WAAW,CAAC,CAAC,EAAC,CAAC,CAAC;QACpE,KAAK,IAAIyH,MAAM,GAAC,CAAC,EAAEA,MAAM,GAACF,SAAS,EAAEE,MAAM,EAAE,EAAE;UAAC,CAAC,UAASA,MAAM,EAAC;YAC7DpC,MAAM,CAACC,UAAU,CAAC,YAAU;cACxBhI,CAAC,CAACiJ,MAAM,CAAC5E,IAAI,CAAC,IAAIR,cAAc,CAAC7D,CAAC,CAACgE,YAAY,EAAEhE,CAAC,EAAEmK,MAAM,EAAErB,UAAU,CAAC,CAAC;cACxE9I,CAAC,CAACgE,YAAY,CAACO,IAAI,CAAC,kBAAkB,EAACvE,CAAC,EAACmK,MAAM,GAACF,SAAS,CAAC;YAC9D,CAAC,EAAC,CAAC,CAAC;UACR,CAAC,EAAEE,MAAM,CAAC;QAAA;QACVpC,MAAM,CAACC,UAAU,CAAC,YAAU;UACxBhI,CAAC,CAACgE,YAAY,CAACO,IAAI,CAAC,kBAAkB,EAACvE,CAAC,CAAC;QAC7C,CAAC,EAAC,CAAC,CAAC;MACN,CAAC;MACDA,CAAC,CAACoK,QAAQ,GAAG,YAAU;QACrB,IAAGvB,MAAM,EAAE,OAAO,CAAC;QACnB;QACA,IAAIwB,GAAG,GAAG,CAAC;QACX,IAAIC,KAAK,GAAG,KAAK;QACjBrH,EAAE,CAACU,IAAI,CAAC3D,CAAC,CAACiJ,MAAM,EAAE,UAASG,CAAC,EAAC;UAC3B,IAAGA,CAAC,CAACC,MAAM,CAAC,CAAC,IAAE,OAAO,EAAEiB,KAAK,GAAG,IAAI;UACpCD,GAAG,IAAIjB,CAAC,CAACgB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC;QACFC,GAAG,GAAIC,KAAK,GAAG,CAAC,GAAID,GAAG,GAAC,OAAO,GAAG,CAAC,GAAGA,GAAK;QAC3CA,GAAG,GAAGP,IAAI,CAACI,GAAG,CAAClK,CAAC,CAAC2I,aAAa,EAAE0B,GAAG,CAAC,CAAC,CAAC;QACtCrK,CAAC,CAAC2I,aAAa,GAAG0B,GAAG;QACrB,OAAOA,GAAG;MACZ,CAAC;MACDrK,CAAC,CAACuK,WAAW,GAAG,YAAU;QACxB,IAAIC,SAAS,GAAG,KAAK;QACrBvH,EAAE,CAACU,IAAI,CAAC3D,CAAC,CAACiJ,MAAM,EAAE,UAASwB,KAAK,EAAC;UAC/B,IAAGA,KAAK,CAACpB,MAAM,CAAC,CAAC,IAAE,WAAW,EAAE;YAC9BmB,SAAS,GAAG,IAAI;YAChB,OAAO,KAAK;UACd;QACF,CAAC,CAAC;QACF,OAAOA,SAAS;MAClB,CAAC;MACDxK,CAAC,CAACkJ,UAAU,GAAG,YAAU;QACvB,IAAIwB,WAAW,GAAG,KAAK;QACvBzH,EAAE,CAACU,IAAI,CAAC3D,CAAC,CAACiJ,MAAM,EAAE,UAASwB,KAAK,EAAC;UAC/B,IAAIpB,MAAM,GAAGoB,KAAK,CAACpB,MAAM,CAAC,CAAC;UAC3B,IAAGA,MAAM,IAAE,SAAS,IAAIA,MAAM,IAAE,WAAW,IAAIoB,KAAK,CAACE,eAAe,KAAK,CAAC,EAAE;YAC1ED,WAAW,GAAG,IAAI;YAClB,OAAO,KAAK;UACd;QACF,CAAC,CAAC;QACF,OAAO,CAACA,WAAW;MACrB,CAAC;MACD1K,CAAC,CAAC4K,KAAK,GAAG,UAASA,KAAK,EAAC;QACrB,IAAG,OAAOA,KAAM,KAAG,WAAW,EAAC;UAC3B5K,CAAC,CAAC4I,MAAM,GAAI5I,CAAC,CAAC4I,MAAM,GAAG,KAAK,GAAG,IAAK;QACxC,CAAC,MAAI;UACD5I,CAAC,CAAC4I,MAAM,GAAGgC,KAAK;QACpB;MACJ,CAAC;MACD5K,CAAC,CAAC6K,QAAQ,GAAG,YAAW;QACtB,OAAO7K,CAAC,CAAC4I,MAAM;MACjB,CAAC;;MAGD;MACA5I,CAAC,CAACgE,YAAY,CAACO,IAAI,CAAC,eAAe,EAAEvE,CAAC,CAAC;MACvCA,CAAC,CAAC0J,SAAS,CAAC,CAAC;MACb,OAAO,IAAI;IACb;IAGA,SAAS7F,cAAcA,CAACG,YAAY,EAAEF,OAAO,EAAEqG,MAAM,EAAE/F,QAAQ,EAAC;MAC9D,IAAIpE,CAAC,GAAG,IAAI;MACZA,CAAC,CAACV,IAAI,GAAG,CAAC,CAAC;MACXU,CAAC,CAAC0C,MAAM,GAAGsB,YAAY,CAACtB,MAAM;MAC9B1C,CAAC,CAACgE,YAAY,GAAGA,YAAY;MAC7BhE,CAAC,CAAC8D,OAAO,GAAGA,OAAO;MACnB9D,CAAC,CAAC8K,WAAW,GAAGhH,OAAO,CAACsB,IAAI;MAC5BpF,CAAC,CAAC+K,WAAW,GAAGjH,OAAO,CAAChB,IAAI,CAACkI,IAAI;MACjChL,CAAC,CAACmK,MAAM,GAAGA,MAAM;MACjBnK,CAAC,CAACoE,QAAQ,GAAGA,QAAQ;MACrBpE,CAAC,CAACiL,oBAAoB,GAAI,IAAIC,IAAI,CAAD,CAAE;MACnClL,CAAC,CAACmL,MAAM,GAAG,KAAK;MAChBnL,CAAC,CAACoL,OAAO,GAAG,CAAC;MACbpL,CAAC,CAACqL,YAAY,GAAG,KAAK;MACtBrL,CAAC,CAAC2K,eAAe,GAAG,CAAC,CAAC,CAAC;;MAEvB;MACA,IAAIxK,SAAS,GAAGH,CAAC,CAAC0C,MAAM,CAAC,WAAW,CAAC;MACrC1C,CAAC,CAACsL,MAAM,GAAG,CAAC;MACZtL,CAAC,CAACuL,SAAS,GAAGvL,CAAC,CAACmK,MAAM,GAAChK,SAAS;MAChCH,CAAC,CAACwL,OAAO,GAAG1B,IAAI,CAAC2B,GAAG,CAACzL,CAAC,CAAC8K,WAAW,EAAE,CAAC9K,CAAC,CAACmK,MAAM,GAAC,CAAC,IAAEhK,SAAS,CAAC;MAC3D,IAAIH,CAAC,CAAC8K,WAAW,GAAC9K,CAAC,CAACwL,OAAO,GAAGrL,SAAS,IAAI,CAACH,CAAC,CAAC0C,MAAM,CAAC,gBAAgB,CAAC,EAAE;QACtE;QACA1C,CAAC,CAACwL,OAAO,GAAGxL,CAAC,CAAC8K,WAAW;MAC3B;MACA9K,CAAC,CAAC0L,GAAG,GAAG,IAAI;;MAEZ;MACA1L,CAAC,CAACwF,IAAI,GAAG,YAAU;QACjB;QACAxF,CAAC,CAAC0L,GAAG,GAAG,IAAIC,cAAc,CAAC,CAAC;QAE5B,IAAIC,WAAW,GAAG,SAAAA,CAAS9G,CAAC,EAAC;UAC3B9E,CAAC,CAACmL,MAAM,GAAG,IAAI;UACf,IAAI9B,MAAM,GAAGrJ,CAAC,CAACqJ,MAAM,CAAC,CAAC;UACvB,IAAGA,MAAM,IAAE,SAAS,EAAE;YACpBrJ,CAAC,CAACoE,QAAQ,CAACiF,MAAM,EAAErJ,CAAC,CAAC+I,OAAO,CAAC,CAAC,CAAC;YAC/B/I,CAAC,CAACgE,YAAY,CAACwF,eAAe,CAAC,CAAC;UAClC,CAAC,MAAM;YACLxJ,CAAC,CAAC6L,IAAI,CAAC,CAAC;UACV;QACF,CAAC;QACD7L,CAAC,CAAC0L,GAAG,CAACI,gBAAgB,CAAC,MAAM,EAAEF,WAAW,EAAE,KAAK,CAAC;QAClD5L,CAAC,CAAC0L,GAAG,CAACI,gBAAgB,CAAC,OAAO,EAAEF,WAAW,EAAE,KAAK,CAAC;QACnD5L,CAAC,CAAC0L,GAAG,CAACI,gBAAgB,CAAC,SAAS,EAAEF,WAAW,EAAE,KAAK,CAAC;;QAErD;QACA,IAAI/F,MAAM,GAAG,EAAE;QACf,IAAInE,kBAAkB,GAAG1B,CAAC,CAAC0C,MAAM,CAAC,oBAAoB,CAAC;QACvD,IAAIqJ,WAAW,GAAG/L,CAAC,CAAC0C,MAAM,CAAC,OAAO,CAAC;QACnC,IAAG,OAAOqJ,WAAW,IAAI,UAAU,EAAEA,WAAW,GAAGA,WAAW,CAAC/L,CAAC,CAAC8D,OAAO,EAAE9D,CAAC,CAAC;QAC5EiD,EAAE,CAACU,IAAI,CAACoI,WAAW,EAAE,UAASC,CAAC,EAACC,CAAC,EAAC;UAChCpG,MAAM,CAACxB,IAAI,CAAC,CAAC6H,kBAAkB,CAACxK,kBAAkB,GAACsK,CAAC,CAAC,EAAEE,kBAAkB,CAACD,CAAC,CAAC,CAAC,CAAChG,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1F,CAAC,CAAC;QACF;QACAJ,MAAM,GAAGA,MAAM,CAACsG,MAAM,CACpB;QACE;QACA,CAAC,0BAA0B,EAAEnM,CAAC,CAACmK,MAAM,GAAG,CAAC,CAAC,EAC1C,CAAC,wBAAwB,EAAEnK,CAAC,CAAC0C,MAAM,CAAC,WAAW,CAAC,CAAC,EACjD,CAAC,+BAA+B,EAAE1C,CAAC,CAACwL,OAAO,GAAGxL,CAAC,CAACuL,SAAS,CAAC,EAC1D,CAAC,wBAAwB,EAAEvL,CAAC,CAAC8K,WAAW,CAAC,EACzC,CAAC,mBAAmB,EAAE9K,CAAC,CAAC+K,WAAW,CAAC,EACpC,CAAC,yBAAyB,EAAE/K,CAAC,CAAC8D,OAAO,CAACuE,gBAAgB,CAAC,EACvD,CAAC,uBAAuB,EAAErI,CAAC,CAAC8D,OAAO,CAACf,QAAQ,CAAC,EAC7C,CAAC,2BAA2B,EAAE/C,CAAC,CAAC8D,OAAO,CAACoB,YAAY,CAAC,EACrD,CAAC,0BAA0B,EAAElF,CAAC,CAAC8D,OAAO,CAACmF,MAAM,CAACtE,MAAM,CAAC,CACtD,CAACyH,MAAM,CAAC,UAASC,IAAI,EAAC;UACrB;UACA;UACA,OAAOrM,CAAC,CAAC0C,MAAM,CAAC2J,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC,CAAC,CACD/E,GAAG,CAAC,UAAS+E,IAAI,EAAC;UACjB;UACA,OAAO,CACL3K,kBAAkB,GAAG1B,CAAC,CAAC0C,MAAM,CAAC2J,IAAI,CAAC,CAAC,CAAC,CAAC,EACtCH,kBAAkB,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC,CAC5B,CAACpG,IAAI,CAAC,GAAG,CAAC;QACb,CAAC,CACH,CAAC;QACD;QACAjG,CAAC,CAAC0L,GAAG,CAACY,IAAI,CAACtM,CAAC,CAAC0C,MAAM,CAAC,YAAY,CAAC,EAAEO,EAAE,CAACpB,SAAS,CAAC,MAAM,EAAEgE,MAAM,CAAC,CAAC;QAChE7F,CAAC,CAAC0L,GAAG,CAACa,OAAO,GAAGvM,CAAC,CAAC0C,MAAM,CAAC,YAAY,CAAC;QACtC1C,CAAC,CAAC0L,GAAG,CAACvJ,eAAe,GAAGnC,CAAC,CAAC0C,MAAM,CAAC,iBAAiB,CAAC;QACnD;QACA,IAAI8J,aAAa,GAAGxM,CAAC,CAAC0C,MAAM,CAAC,SAAS,CAAC;QACvC,IAAG,OAAO8J,aAAa,KAAK,UAAU,EAAE;UACtCA,aAAa,GAAGA,aAAa,CAACxM,CAAC,CAAC8D,OAAO,EAAE9D,CAAC,CAAC;QAC7C;QACAiD,EAAE,CAACU,IAAI,CAAC6I,aAAa,EAAE,UAASR,CAAC,EAACC,CAAC,EAAE;UACnCjM,CAAC,CAAC0L,GAAG,CAACe,gBAAgB,CAACT,CAAC,EAAEC,CAAC,CAAC;QAC9B,CAAC,CAAC;QACFjM,CAAC,CAAC0L,GAAG,CAACG,IAAI,CAAC,IAAI,CAAC;MAClB,CAAC;MAED7L,CAAC,CAAC0M,kBAAkB,GAAG,YAAU;QAC/B1M,CAAC,CAAC2K,eAAe,GAAG,CAAC;QACrB3K,CAAC,CAAC6L,IAAI,CAAC,CAAC;MACV,CAAC;;MAED;MACA7L,CAAC,CAAC6L,IAAI,GAAG,YAAU;QACjB,IAAI1K,UAAU,GAAGnB,CAAC,CAAC0C,MAAM,CAAC,YAAY,CAAC;QACvC,IAAG,OAAOvB,UAAU,KAAK,UAAU,EAAE;UACnC,QAAOnB,CAAC,CAAC2K,eAAe;YACxB,KAAK,CAAC;cAAE3K,CAAC,CAAC2K,eAAe,GAAG,CAAC;cAAExJ,UAAU,CAACnB,CAAC,CAAC;cAAE;YAC9C,KAAK,CAAC;cAAE;YACR,KAAK,CAAC;cAAE;UACR;QACF;QACA,IAAGA,CAAC,CAAC0C,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC1C,CAAC,CAACmL,MAAM,EAAE;UACtCnL,CAAC,CAACwF,IAAI,CAAC,CAAC;UACR;QACF;;QAEA;QACAxF,CAAC,CAAC0L,GAAG,GAAG,IAAIC,cAAc,CAAC,CAAC;;QAE5B;QACA3L,CAAC,CAAC0L,GAAG,CAAC9B,MAAM,CAACkC,gBAAgB,CAAC,UAAU,EAAE,UAAShH,CAAC,EAAC;UACnD,IAAK,IAAIoG,IAAI,CAAD,CAAC,GAAIlL,CAAC,CAACiL,oBAAoB,GAAGjL,CAAC,CAAC0C,MAAM,CAAC,2BAA2B,CAAC,GAAG,IAAI,EAAG;YACvF1C,CAAC,CAACoE,QAAQ,CAAC,UAAU,CAAC;YACtBpE,CAAC,CAACiL,oBAAoB,GAAI,IAAIC,IAAI,CAAD,CAAE;UACrC;UACAlL,CAAC,CAACsL,MAAM,GAACxG,CAAC,CAACwG,MAAM,IAAE,CAAC;QACtB,CAAC,EAAE,KAAK,CAAC;QACTtL,CAAC,CAACsL,MAAM,GAAG,CAAC;QACZtL,CAAC,CAACqL,YAAY,GAAG,KAAK;QACtBrL,CAAC,CAACoE,QAAQ,CAAC,UAAU,CAAC;;QAEtB;QACA,IAAIuI,WAAW,GAAG,SAAAA,CAAS7H,CAAC,EAAC;UAC3B,IAAIuE,MAAM,GAAGrJ,CAAC,CAACqJ,MAAM,CAAC,CAAC;UACvB,IAAGA,MAAM,IAAE,SAAS,IAAEA,MAAM,IAAE,OAAO,EAAE;YACrCrJ,CAAC,CAACoE,QAAQ,CAACiF,MAAM,EAAErJ,CAAC,CAAC+I,OAAO,CAAC,CAAC,CAAC;YAC/B/I,CAAC,CAACgE,YAAY,CAACwF,eAAe,CAAC,CAAC;UAClC,CAAC,MAAM;YACLxJ,CAAC,CAACoE,QAAQ,CAAC,OAAO,EAAEpE,CAAC,CAAC+I,OAAO,CAAC,CAAC,CAAC;YAChC/I,CAAC,CAACgJ,KAAK,CAAC,CAAC;YACThJ,CAAC,CAACoL,OAAO,EAAE;YACX,IAAIwB,aAAa,GAAG5M,CAAC,CAAC0C,MAAM,CAAC,oBAAoB,CAAC;YAClD,IAAGkK,aAAa,KAAK5K,SAAS,EAAE;cAC9BhC,CAAC,CAACqL,YAAY,GAAG,IAAI;cACrBrD,UAAU,CAAChI,CAAC,CAAC6L,IAAI,EAAEe,aAAa,CAAC;YACnC,CAAC,MAAM;cACL5M,CAAC,CAAC6L,IAAI,CAAC,CAAC;YACV;UACF;QACF,CAAC;QACD7L,CAAC,CAAC0L,GAAG,CAACI,gBAAgB,CAAC,MAAM,EAAEa,WAAW,EAAE,KAAK,CAAC;QAClD3M,CAAC,CAAC0L,GAAG,CAACI,gBAAgB,CAAC,OAAO,EAAEa,WAAW,EAAE,KAAK,CAAC;QACnD3M,CAAC,CAAC0L,GAAG,CAACI,gBAAgB,CAAC,SAAS,EAAEa,WAAW,EAAE,KAAK,CAAC;;QAErD;QACA,IAAI1L,KAAK,GAAG,CACV,CAAC,0BAA0B,EAAEjB,CAAC,CAACmK,MAAM,GAAG,CAAC,CAAC,EAC1C,CAAC,wBAAwB,EAAEnK,CAAC,CAAC0C,MAAM,CAAC,WAAW,CAAC,CAAC,EACjD,CAAC,+BAA+B,EAAE1C,CAAC,CAACwL,OAAO,GAAGxL,CAAC,CAACuL,SAAS,CAAC,EAC1D,CAAC,wBAAwB,EAAEvL,CAAC,CAAC8K,WAAW,CAAC,EACzC,CAAC,mBAAmB,EAAE9K,CAAC,CAAC+K,WAAW,CAAC,EACpC,CAAC,yBAAyB,EAAE/K,CAAC,CAAC8D,OAAO,CAACuE,gBAAgB,CAAC,EACvD,CAAC,uBAAuB,EAAErI,CAAC,CAAC8D,OAAO,CAACf,QAAQ,CAAC,EAC7C,CAAC,2BAA2B,EAAE/C,CAAC,CAAC8D,OAAO,CAACoB,YAAY,CAAC,EACrD,CAAC,0BAA0B,EAAElF,CAAC,CAAC8D,OAAO,CAACmF,MAAM,CAACtE,MAAM,CAAC,CACtD,CAACyH,MAAM,CAAC,UAASC,IAAI,EAAC;UACrB;UACA;UACA,OAAOrM,CAAC,CAAC0C,MAAM,CAAC2J,IAAI,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC,CAAC,CACDQ,MAAM,CAAC,UAAS5L,KAAK,EAAEoL,IAAI,EAAC;UAC3B;UACApL,KAAK,CAACjB,CAAC,CAAC0C,MAAM,CAAC2J,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC;UAClC,OAAOpL,KAAK;QACd,CAAC,EAAE,CAAC,CAAC,CAAC;QACN;QACA,IAAI8K,WAAW,GAAG/L,CAAC,CAAC0C,MAAM,CAAC,OAAO,CAAC;QACnC,IAAG,OAAOqJ,WAAW,IAAI,UAAU,EAAEA,WAAW,GAAGA,WAAW,CAAC/L,CAAC,CAAC8D,OAAO,EAAE9D,CAAC,CAAC;QAC5EiD,EAAE,CAACU,IAAI,CAACoI,WAAW,EAAE,UAASC,CAAC,EAACC,CAAC,EAAC;UAChChL,KAAK,CAAC+K,CAAC,CAAC,GAAGC,CAAC;QACd,CAAC,CAAC;QAEF,IAAIa,IAAI,GAAI9M,CAAC,CAAC8D,OAAO,CAAChB,IAAI,CAAC/C,KAAK,GAAG,OAAO,GAAIC,CAAC,CAAC8D,OAAO,CAAChB,IAAI,CAAChD,QAAQ,GAAG,UAAU,GAAIE,CAAC,CAAC8D,OAAO,CAAChB,IAAI,CAACjD,WAAW,GAAG,aAAa,GAAG,OAAU;QAC7I,IAAIkN,KAAK,GAAG/M,CAAC,CAAC8D,OAAO,CAAChB,IAAI,CAACgK,IAAI,CAAC,CAAC9M,CAAC,CAACuL,SAAS,EAAEvL,CAAC,CAACwL,OAAO,EAAExL,CAAC,CAAC0C,MAAM,CAAC,sBAAsB,CAAC,GAAG1C,CAAC,CAAC8D,OAAO,CAAChB,IAAI,CAACkI,IAAI,GAAG,EAAE,CAAC;QACrH,IAAIgC,IAAI,GAAG,IAAI;QACf,IAAInH,MAAM,GAAG,EAAE;QAEf,IAAInE,kBAAkB,GAAG1B,CAAC,CAAC0C,MAAM,CAAC,oBAAoB,CAAC;QAC/C,IAAI1C,CAAC,CAAC0C,MAAM,CAAC,QAAQ,CAAC,KAAK,OAAO,EAAE;UAChC;UACAsK,IAAI,GAAGD,KAAK;UACZ9J,EAAE,CAACU,IAAI,CAAC1C,KAAK,EAAE,UAAU+K,CAAC,EAAEC,CAAC,EAAE;YAC3BpG,MAAM,CAACxB,IAAI,CAAC,CAAC6H,kBAAkB,CAACxK,kBAAkB,GAAGsK,CAAC,CAAC,EAAEE,kBAAkB,CAACD,CAAC,CAAC,CAAC,CAAChG,IAAI,CAAC,GAAG,CAAC,CAAC;UAC9F,CAAC,CAAC;QACN,CAAC,MAAM;UACH;UACA+G,IAAI,GAAG,IAAIC,QAAQ,CAAC,CAAC;UACrBhK,EAAE,CAACU,IAAI,CAAC1C,KAAK,EAAE,UAAU+K,CAAC,EAAEC,CAAC,EAAE;YAC3Be,IAAI,CAACE,MAAM,CAACxL,kBAAkB,GAAGsK,CAAC,EAAEC,CAAC,CAAC;YACtCpG,MAAM,CAACxB,IAAI,CAAC,CAAC6H,kBAAkB,CAACxK,kBAAkB,GAAGsK,CAAC,CAAC,EAAEE,kBAAkB,CAACD,CAAC,CAAC,CAAC,CAAChG,IAAI,CAAC,GAAG,CAAC,CAAC;UAC9F,CAAC,CAAC;UACF,IAAIjG,CAAC,CAAC0C,MAAM,CAAC,aAAa,CAAC,IAAI,MAAM,EAAE;YACnCsK,IAAI,CAACE,MAAM,CAACxL,kBAAkB,GAAG1B,CAAC,CAAC0C,MAAM,CAAC,mBAAmB,CAAC,EAAEqK,KAAK,EAAE/M,CAAC,CAAC8D,OAAO,CAACf,QAAQ,CAAC;UAC9F,CAAC,MACI,IAAI/C,CAAC,CAAC0C,MAAM,CAAC,aAAa,CAAC,IAAI,QAAQ,EAAE;YAC1C,IAAIyK,EAAE,GAAG,IAAIC,UAAU,CAAC,CAAC;YACzBD,EAAE,CAACE,MAAM,GAAG,UAAUvI,CAAC,EAAE;cACrBkI,IAAI,CAACE,MAAM,CAACxL,kBAAkB,GAAG1B,CAAC,CAAC0C,MAAM,CAAC,mBAAmB,CAAC,EAAEyK,EAAE,CAAC1H,MAAM,CAAC;cAC1EzF,CAAC,CAAC0L,GAAG,CAACG,IAAI,CAACmB,IAAI,CAAC;YACpB,CAAC;YACDG,EAAE,CAACG,aAAa,CAACP,KAAK,CAAC;UAC3B;QACJ;QAER,IAAIvL,MAAM,GAAGyB,EAAE,CAACpB,SAAS,CAAC,QAAQ,EAAEgE,MAAM,CAAC;QAC3C,IAAIzE,MAAM,GAAGpB,CAAC,CAAC0C,MAAM,CAAC,cAAc,CAAC;QAErC1C,CAAC,CAAC0L,GAAG,CAACY,IAAI,CAAClL,MAAM,EAAEI,MAAM,CAAC;QAC1B,IAAIxB,CAAC,CAAC0C,MAAM,CAAC,QAAQ,CAAC,KAAK,OAAO,EAAE;UAClC1C,CAAC,CAAC0L,GAAG,CAACe,gBAAgB,CAAC,cAAc,EAAE,0BAA0B,CAAC;QACpE;QACAzM,CAAC,CAAC0L,GAAG,CAACa,OAAO,GAAGvM,CAAC,CAAC0C,MAAM,CAAC,YAAY,CAAC;QACtC1C,CAAC,CAAC0L,GAAG,CAACvJ,eAAe,GAAGnC,CAAC,CAAC0C,MAAM,CAAC,iBAAiB,CAAC;QACnD;QACA,IAAI8J,aAAa,GAAGxM,CAAC,CAAC0C,MAAM,CAAC,SAAS,CAAC;QACvC,IAAG,OAAO8J,aAAa,KAAK,UAAU,EAAE;UACtCA,aAAa,GAAGA,aAAa,CAACxM,CAAC,CAAC8D,OAAO,EAAE9D,CAAC,CAAC;QAC7C;QAEAiD,EAAE,CAACU,IAAI,CAAC6I,aAAa,EAAE,UAASR,CAAC,EAACC,CAAC,EAAE;UACnCjM,CAAC,CAAC0L,GAAG,CAACe,gBAAgB,CAACT,CAAC,EAAEC,CAAC,CAAC;QAC9B,CAAC,CAAC;QAEM,IAAIjM,CAAC,CAAC0C,MAAM,CAAC,aAAa,CAAC,IAAI,MAAM,EAAE;UACnC1C,CAAC,CAAC0L,GAAG,CAACG,IAAI,CAACmB,IAAI,CAAC;QACpB;MACV,CAAC;MACDhN,CAAC,CAACgJ,KAAK,GAAG,YAAU;QAClB;QACA,IAAGhJ,CAAC,CAAC0L,GAAG,EAAE1L,CAAC,CAAC0L,GAAG,CAAC1C,KAAK,CAAC,CAAC;QACvBhJ,CAAC,CAAC0L,GAAG,GAAG,IAAI;MACd,CAAC;MACD1L,CAAC,CAACqJ,MAAM,GAAG,YAAU;QACnB;QACA,IAAGrJ,CAAC,CAACqL,YAAY,EAAE;UACjB;UACA;UACA,OAAO,WAAW;QACpB,CAAC,MAAM,IAAG,CAACrL,CAAC,CAAC0L,GAAG,EAAE;UAChB,OAAO,SAAS;QAClB,CAAC,MAAM,IAAG1L,CAAC,CAAC0L,GAAG,CAAC6B,UAAU,GAAC,CAAC,EAAE;UAC5B;UACA,OAAO,WAAW;QACpB,CAAC,MAAM;UACL,IAAGvN,CAAC,CAAC0L,GAAG,CAACrC,MAAM,IAAI,GAAG,IAAIrJ,CAAC,CAAC0L,GAAG,CAACrC,MAAM,IAAI,GAAG,EAAE;YAC7C;YACA,OAAO,SAAS;UAClB,CAAC,MAAM,IAAGpG,EAAE,CAACqC,QAAQ,CAACtF,CAAC,CAAC0C,MAAM,CAAC,iBAAiB,CAAC,EAAE1C,CAAC,CAAC0L,GAAG,CAACrC,MAAM,CAAC,IAAIrJ,CAAC,CAACoL,OAAO,IAAIpL,CAAC,CAAC0C,MAAM,CAAC,iBAAiB,CAAC,EAAE;YAC5G;YACA,OAAO,OAAO;UAChB,CAAC,MAAM;YACL;YACA;YACA1C,CAAC,CAACgJ,KAAK,CAAC,CAAC;YACT,OAAO,SAAS;UAClB;QACF;MACF,CAAC;MACDhJ,CAAC,CAAC+I,OAAO,GAAG,YAAU;QACpB,OAAO/I,CAAC,CAAC0L,GAAG,GAAG1L,CAAC,CAAC0L,GAAG,CAAC8B,YAAY,GAAG,EAAE;MACxC,CAAC;MACDxN,CAAC,CAACoK,QAAQ,GAAG,UAASqD,QAAQ,EAAC;QAC7B,IAAG,OAAOA,QAAS,KAAG,WAAW,EAAEA,QAAQ,GAAG,KAAK;QACnD,IAAIC,MAAM,GAAID,QAAQ,GAAG,CAACzN,CAAC,CAACwL,OAAO,GAACxL,CAAC,CAACuL,SAAS,IAAEvL,CAAC,CAAC8K,WAAW,GAAG,CAAE;QACnE,IAAG9K,CAAC,CAACqL,YAAY,EAAE,OAAO,CAAC;QAC3B,IAAG,CAACrL,CAAC,CAAC0L,GAAG,IAAI,CAAC1L,CAAC,CAAC0L,GAAG,CAACrC,MAAM,EAAEqE,MAAM,IAAE,GAAG;QACvC,IAAIC,CAAC,GAAG3N,CAAC,CAACqJ,MAAM,CAAC,CAAC;QAClB,QAAOsE,CAAC;UACR,KAAK,SAAS;UACd,KAAK,OAAO;YACV,OAAO,CAAC,GAACD,MAAM;UACjB,KAAK,SAAS;YACZ,OAAO,CAAC,GAACA,MAAM;UACjB;YACE,OAAO1N,CAAC,CAACsL,MAAM,IAAEtL,CAAC,CAACwL,OAAO,GAACxL,CAAC,CAACuL,SAAS,CAAC,GAACmC,MAAM;QAChD;MACF,CAAC;MACD,OAAO,IAAI;IACb;;IAEA;IACA1N,CAAC,CAACwJ,eAAe,GAAG,YAAU;MAC5B,IAAIoE,KAAK,GAAG,KAAK;;MAEjB;MACA;MACA;MACA,IAAI5N,CAAC,CAAC0C,MAAM,CAAC,6BAA6B,CAAC,EAAE;QAC3CO,EAAE,CAACU,IAAI,CAAC3D,CAAC,CAACC,KAAK,EAAE,UAAS6C,IAAI,EAAC;UAC7B,IAAGA,IAAI,CAACmG,MAAM,CAACtE,MAAM,IAAI7B,IAAI,CAACmG,MAAM,CAAC,CAAC,CAAC,CAACI,MAAM,CAAC,CAAC,IAAE,SAAS,IAAIvG,IAAI,CAACmG,MAAM,CAAC,CAAC,CAAC,CAAC0B,eAAe,KAAK,CAAC,EAAE;YACnG7H,IAAI,CAACmG,MAAM,CAAC,CAAC,CAAC,CAAC4C,IAAI,CAAC,CAAC;YACrB+B,KAAK,GAAG,IAAI;YACZ,OAAO,KAAK;UACd;UACA,IAAG9K,IAAI,CAACmG,MAAM,CAACtE,MAAM,GAAC,CAAC,IAAI7B,IAAI,CAACmG,MAAM,CAACnG,IAAI,CAACmG,MAAM,CAACtE,MAAM,GAAC,CAAC,CAAC,CAAC0E,MAAM,CAAC,CAAC,IAAE,SAAS,IAAIvG,IAAI,CAACmG,MAAM,CAACnG,IAAI,CAACmG,MAAM,CAACtE,MAAM,GAAC,CAAC,CAAC,CAACgG,eAAe,KAAK,CAAC,EAAE;YAC3I7H,IAAI,CAACmG,MAAM,CAACnG,IAAI,CAACmG,MAAM,CAACtE,MAAM,GAAC,CAAC,CAAC,CAACkH,IAAI,CAAC,CAAC;YACxC+B,KAAK,GAAG,IAAI;YACZ,OAAO,KAAK;UACd;QACF,CAAC,CAAC;QACF,IAAGA,KAAK,EAAE,OAAO,IAAI;MACvB;;MAEA;MACA3K,EAAE,CAACU,IAAI,CAAC3D,CAAC,CAACC,KAAK,EAAE,UAAS6C,IAAI,EAAC;QAC7B,IAAGA,IAAI,CAAC+H,QAAQ,CAAC,CAAC,KAAG,KAAK,EAAC;UAC1B5H,EAAE,CAACU,IAAI,CAACb,IAAI,CAACmG,MAAM,EAAE,UAASwB,KAAK,EAAC;YAClC,IAAGA,KAAK,CAACpB,MAAM,CAAC,CAAC,IAAE,SAAS,IAAIoB,KAAK,CAACE,eAAe,KAAK,CAAC,EAAE;cAC3DF,KAAK,CAACoB,IAAI,CAAC,CAAC;cACZ+B,KAAK,GAAG,IAAI;cACZ,OAAO,KAAK;YACd;UACD,CAAC,CAAC;QACJ;QACA,IAAGA,KAAK,EAAE,OAAO,KAAK;MACxB,CAAC,CAAC;MACF,IAAGA,KAAK,EAAE,OAAO,IAAI;;MAErB;MACA,IAAIlD,WAAW,GAAG,KAAK;MACvBzH,EAAE,CAACU,IAAI,CAAC3D,CAAC,CAACC,KAAK,EAAE,UAAS6C,IAAI,EAAC;QAC7B,IAAG,CAACA,IAAI,CAACoG,UAAU,CAAC,CAAC,EAAE;UACrBwB,WAAW,GAAG,IAAI;UAClB,OAAO,KAAK;QACd;MACF,CAAC,CAAC;MACF,IAAG,CAACA,WAAW,EAAE;QACf;QACA1K,CAAC,CAACuE,IAAI,CAAC,UAAU,CAAC;MACpB;MACA,OAAO,KAAK;IACd,CAAC;;IAGD;IACAvE,CAAC,CAAC6N,YAAY,GAAG,UAASC,QAAQ,EAAElH,WAAW,EAAC;MAC9C,IAAG,OAAOkH,QAAQ,CAACnJ,MAAO,IAAE,WAAW,EAAEmJ,QAAQ,GAAG,CAACA,QAAQ,CAAC;MAE9D7K,EAAE,CAACU,IAAI,CAACmK,QAAQ,EAAE,UAASC,OAAO,EAAE;QAClC,IAAIC,KAAK;QACT,IAAGD,OAAO,CAACE,OAAO,KAAG,OAAO,IAAIF,OAAO,CAAC/C,IAAI,KAAG,MAAM,EAAC;UACpDgD,KAAK,GAAGD,OAAO;QACjB,CAAC,MAAM;UACLC,KAAK,GAAGE,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;UACvCH,KAAK,CAACI,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;UAClCJ,KAAK,CAACK,KAAK,CAACC,OAAO,GAAG,MAAM;UAC5BP,OAAO,CAACjC,gBAAgB,CAAC,OAAO,EAAE,YAAU;YAC1CkC,KAAK,CAACK,KAAK,CAACE,OAAO,GAAG,CAAC;YACvBP,KAAK,CAACK,KAAK,CAACC,OAAO,GAAC,OAAO;YAC3BN,KAAK,CAACQ,KAAK,CAAC,CAAC;YACbR,KAAK,CAACS,KAAK,CAAC,CAAC;YACbT,KAAK,CAACK,KAAK,CAACC,OAAO,GAAC,MAAM;UAC5B,CAAC,EAAE,KAAK,CAAC;UACTP,OAAO,CAACW,WAAW,CAACV,KAAK,CAAC;QAC5B;QACA,IAAI9L,QAAQ,GAAGlC,CAAC,CAAC0C,MAAM,CAAC,UAAU,CAAC;QACnC,IAAI,OAAOR,QAAS,KAAG,WAAW,IAAEA,QAAQ,IAAE,CAAC,EAAC;UAC9C8L,KAAK,CAACI,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC;QAC5C,CAAC,MAAM;UACLJ,KAAK,CAACW,eAAe,CAAC,UAAU,CAAC;QACnC;QACA,IAAG/H,WAAW,EAAC;UACboH,KAAK,CAACI,YAAY,CAAC,iBAAiB,EAAE,iBAAiB,CAAC;QAC1D,CAAC,MAAM;UACLJ,KAAK,CAACW,eAAe,CAAC,iBAAiB,CAAC;QAC1C;QACA,IAAIC,SAAS,GAAG5O,CAAC,CAAC0C,MAAM,CAAC,UAAU,CAAC;QACpC,IAAI,OAAQkM,SAAU,KAAK,WAAW,IAAIA,SAAS,CAACjK,MAAM,IAAI,CAAC,EAAE;UAC/DqJ,KAAK,CAACI,YAAY,CAAC,QAAQ,EAAEQ,SAAS,CAACtH,GAAG,CAAC,UAAUxC,CAAC,EAAE;YAAE,OAAO,GAAG,GAAGA,CAAC;UAAC,CAAC,CAAC,CAACmB,IAAI,CAAC,GAAG,CAAC,CAAC;QACxF,CAAC,MACI;UACH+H,KAAK,CAACW,eAAe,CAAC,QAAQ,CAAC;QACjC;QACA;QACAX,KAAK,CAAClC,gBAAgB,CAAC,QAAQ,EAAE,UAAShH,CAAC,EAAC;UAC1C2C,uBAAuB,CAAC3C,CAAC,CAACtD,MAAM,CAACvB,KAAK,EAAC6E,CAAC,CAAC;UACzC,IAAIzC,UAAU,GAAGrC,CAAC,CAAC0C,MAAM,CAAC,YAAY,CAAC;UACvC,IAAIL,UAAU,EAAE;YACdyC,CAAC,CAACtD,MAAM,CAACkE,KAAK,GAAG,EAAE;UACrB;QACF,CAAC,EAAE,KAAK,CAAC;MACX,CAAC,CAAC;IACJ,CAAC;IACD1F,CAAC,CAAC6O,UAAU,GAAG,UAASf,QAAQ,EAAC;MAC/B,IAAG,OAAOA,QAAQ,CAACnJ,MAAO,IAAE,WAAW,EAAEmJ,QAAQ,GAAG,CAACA,QAAQ,CAAC;MAE9D7K,EAAE,CAACU,IAAI,CAACmK,QAAQ,EAAE,UAASC,OAAO,EAAE;QAClCA,OAAO,CAACjC,gBAAgB,CAAC,UAAU,EAAE9G,cAAc,EAAE,KAAK,CAAC;QAC3D+I,OAAO,CAACjC,gBAAgB,CAAC,WAAW,EAAE9G,cAAc,EAAE,KAAK,CAAC;QAC5D+I,OAAO,CAACjC,gBAAgB,CAAC,MAAM,EAAE5F,MAAM,EAAE,KAAK,CAAC;MACjD,CAAC,CAAC;IACJ,CAAC;IACDlG,CAAC,CAAC8O,YAAY,GAAG,UAAShB,QAAQ,EAAE;MAClC,IAAI,OAAOA,QAAQ,CAACnJ,MAAO,IAAI,WAAW,EAAEmJ,QAAQ,GAAG,CAACA,QAAQ,CAAC;MAEjE7K,EAAE,CAACU,IAAI,CAACmK,QAAQ,EAAE,UAASC,OAAO,EAAE;QAClCA,OAAO,CAACgB,mBAAmB,CAAC,UAAU,EAAE/J,cAAc,CAAC;QACvD+I,OAAO,CAACgB,mBAAmB,CAAC,WAAW,EAAE/J,cAAc,CAAC;QACxD+I,OAAO,CAACgB,mBAAmB,CAAC,MAAM,EAAE7I,MAAM,CAAC;MAC7C,CAAC,CAAC;IACJ,CAAC;IACDlG,CAAC,CAACuK,WAAW,GAAG,YAAU;MACxB,IAAIC,SAAS,GAAG,KAAK;MACrBvH,EAAE,CAACU,IAAI,CAAC3D,CAAC,CAACC,KAAK,EAAE,UAAS6C,IAAI,EAAC;QAC7B,IAAIA,IAAI,CAACyH,WAAW,CAAC,CAAC,EAAE;UACtBC,SAAS,GAAG,IAAI;UAChB,OAAO,KAAK;QACd;MACF,CAAC,CAAC;MACF,OAAOA,SAAS;IAClB,CAAC;IACDxK,CAAC,CAAC4J,MAAM,GAAG,YAAU;MACnB;MACA,IAAG5J,CAAC,CAACuK,WAAW,CAAC,CAAC,EAAE;MACpB;MACAvK,CAAC,CAACuE,IAAI,CAAC,aAAa,CAAC;MACrB,KAAK,IAAIyK,GAAG,GAAC,CAAC,EAAEA,GAAG,IAAEhP,CAAC,CAAC0C,MAAM,CAAC,qBAAqB,CAAC,EAAEsM,GAAG,EAAE,EAAE;QAC3DhP,CAAC,CAACwJ,eAAe,CAAC,CAAC;MACrB;IACF,CAAC;IACDxJ,CAAC,CAAC4K,KAAK,GAAG,YAAU;MAClB;MACA3H,EAAE,CAACU,IAAI,CAAC3D,CAAC,CAACC,KAAK,EAAE,UAAS6C,IAAI,EAAC;QAC7BA,IAAI,CAACkG,KAAK,CAAC,CAAC;MACd,CAAC,CAAC;MACFhJ,CAAC,CAACuE,IAAI,CAAC,OAAO,CAAC;IACjB,CAAC;IACDvE,CAAC,CAACsJ,MAAM,GAAG,YAAU;MACnBtJ,CAAC,CAACuE,IAAI,CAAC,cAAc,CAAC;MACtB,KAAI,IAAIE,CAAC,GAAGzE,CAAC,CAACC,KAAK,CAAC0E,MAAM,GAAG,CAAC,EAAEF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC3CzE,CAAC,CAACC,KAAK,CAACwE,CAAC,CAAC,CAAC6E,MAAM,CAAC,CAAC;MACrB;MACAtJ,CAAC,CAACuE,IAAI,CAAC,QAAQ,CAAC;IAClB,CAAC;IACDvE,CAAC,CAACoK,QAAQ,GAAG,YAAU;MACrB,IAAI6E,SAAS,GAAG,CAAC;MACjB,IAAIC,SAAS,GAAG,CAAC;MACjB;MACAjM,EAAE,CAACU,IAAI,CAAC3D,CAAC,CAACC,KAAK,EAAE,UAAS6C,IAAI,EAAC;QAC7BmM,SAAS,IAAInM,IAAI,CAACsH,QAAQ,CAAC,CAAC,GAACtH,IAAI,CAACsC,IAAI;QACtC8J,SAAS,IAAIpM,IAAI,CAACsC,IAAI;MACxB,CAAC,CAAC;MACF,OAAO8J,SAAS,GAAC,CAAC,GAAGD,SAAS,GAACC,SAAS,GAAG,CAAC;IAC9C,CAAC;IACDlP,CAAC,CAACoI,OAAO,GAAG,UAAStF,IAAI,EAAEqB,KAAK,EAAC;MAC/BsD,uBAAuB,CAAC,CAAC3E,IAAI,CAAC,EAAEqB,KAAK,CAAC;IACxC,CAAC;IACDnE,CAAC,CAACmP,QAAQ,GAAG,UAASlP,KAAK,EAAEkE,KAAK,EAAC;MACjCsD,uBAAuB,CAACxH,KAAK,EAAEkE,KAAK,CAAC;IACvC,CAAC;IACDnE,CAAC,CAAC2H,UAAU,GAAG,UAAS7E,IAAI,EAAC;MAC3B,KAAI,IAAI2B,CAAC,GAAGzE,CAAC,CAACC,KAAK,CAAC0E,MAAM,GAAG,CAAC,EAAEF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC3C,IAAGzE,CAAC,CAACC,KAAK,CAACwE,CAAC,CAAC,KAAK3B,IAAI,EAAE;UACtB9C,CAAC,CAACC,KAAK,CAACmP,MAAM,CAAC3K,CAAC,EAAE,CAAC,CAAC;QACtB;MACF;IACF,CAAC;IACDzE,CAAC,CAACsI,uBAAuB,GAAG,UAASD,gBAAgB,EAAC;MACpD,IAAIgC,GAAG,GAAG,KAAK;MACfpH,EAAE,CAACU,IAAI,CAAC3D,CAAC,CAACC,KAAK,EAAE,UAASsI,CAAC,EAAC;QAC1B,IAAGA,CAAC,CAACF,gBAAgB,IAAEA,gBAAgB,EAAEgC,GAAG,GAAG9B,CAAC;MAClD,CAAC,CAAC;MACF,OAAO8B,GAAG;IACZ,CAAC;IACDrK,CAAC,CAACqP,OAAO,GAAG,YAAU;MACpB,IAAIH,SAAS,GAAG,CAAC;MACjBjM,EAAE,CAACU,IAAI,CAAC3D,CAAC,CAACC,KAAK,EAAE,UAAS6C,IAAI,EAAC;QAC7BoM,SAAS,IAAIpM,IAAI,CAACsC,IAAI;MACxB,CAAC,CAAC;MACF,OAAO8J,SAAS;IAClB,CAAC;IACDlP,CAAC,CAACsP,eAAe,GAAG,UAAUxK,CAAC,EAAE;MAC/BoB,MAAM,CAACpB,CAAC,CAAC;IACX,CAAC;IACD9E,CAAC,CAACuP,iBAAiB,GAAG,UAAUzK,CAAC,EAAE;MACjC2C,uBAAuB,CAAC3C,CAAC,CAACtD,MAAM,CAACvB,KAAK,EAAE6E,CAAC,CAAC;MAC1CA,CAAC,CAACtD,MAAM,CAACkE,KAAK,GAAG,EAAE;IACrB,CAAC;IACD1F,CAAC,CAACwP,WAAW,GAAG,UAASvO,KAAK,EAAC;MAC3BjB,CAAC,CAACV,IAAI,CAAC2B,KAAK,GAAGA,KAAK;IACxB,CAAC;IAED,OAAO,IAAI;EACb,CAAC;;EAGD;EACA,IAAI,OAAOwO,MAAM,IAAI,WAAW,EAAE;IAChCA,MAAM,CAACC,OAAO,GAAGrQ,SAAS;EAC5B,CAAC,MAAM,IAAI,OAAOsQ,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACC,GAAG,EAAE;IACrD;IACAD,MAAM,CAAC,YAAU;MACf,OAAOtQ,SAAS;IAClB,CAAC,CAAC;EACJ,CAAC,MAAM;IACL;IACA0I,MAAM,CAAC1I,SAAS,GAAGA,SAAS;EAC9B;AAEF,CAAC,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}